<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SABlog</title>
  <subtitle>StoneArk&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.stoneark.org/"/>
  <updated>2016-10-04T03:21:01.000Z</updated>
  <id>http://blog.stoneark.org/</id>
  
  <author>
    <name>StoneArk</name>
    <email>stoneark86@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kanzhihu closed</title>
    <link href="http://blog.stoneark.org/2016/10/04/kanzhihu-closed/"/>
    <id>http://blog.stoneark.org/2016/10/04/kanzhihu-closed/</id>
    <published>2016-10-04T03:00:43.000Z</published>
    <updated>2016-10-04T03:21:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天像之前一样打开<a href="http://www.kanzhihu.com" target="_blank" rel="external">看知乎</a>，出现的不再是“昨日最新”、“今日热门”、“历史精华”，而是一个“Good bye”：</p>
<p><img src="http://stoneark.qiniudn.com/blogimg/kanzhihu_closed.png" alt=""></p>
<p>看知乎已经成为了我的日常，自从发现了这个知乎精选站，它就成了我浏览知乎的流量入口。感觉它能比日报提供能丰富的内容。</p>
<p>突然下线了，还真不适应。不过这种非官方的爬虫，能坚持这么久也是蛮不容易的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天像之前一样打开&lt;a href=&quot;http://www.kanzhihu.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;看知乎&lt;/a&gt;，出现的不再是“昨日最新”、“今日热门”、“历史精华”，而是一个“Good bye”：&lt;/p&gt;
&lt;p&gt;&lt;img 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>macOS Sierra comes</title>
    <link href="http://blog.stoneark.org/2016/09/21/macos-sierra-comes/"/>
    <id>http://blog.stoneark.org/2016/09/21/macos-sierra-comes/</id>
    <published>2016-09-21T01:55:32.000Z</published>
    <updated>2016-09-21T01:57:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>macOS Sierra 正式版已上架 Mac App Store！</p>
<p><img src="http://stoneark.qiniudn.com/blogimg/macos_sierra_comes.png" alt="macOS Sierra"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;macOS Sierra 正式版已上架 Mac App Store！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://stoneark.qiniudn.com/blogimg/macos_sierra_comes.png&quot; alt=&quot;macOS Sierra&quot;&gt;&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Image of &quot;Download on the App Store&quot;</title>
    <link href="http://blog.stoneark.org/2016/08/14/download-on-the-app-store-image/"/>
    <id>http://blog.stoneark.org/2016/08/14/download-on-the-app-store-image/</id>
    <published>2016-08-14T07:12:47.000Z</published>
    <updated>2016-08-26T06:17:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前做 App 的下载页面时，都是只需要简体中文就够了，所以“从 App Store 下载”的图片是在网上随便找了一个用的。这次还需要繁体中文和英文的图片，刚想搜索一下，突然意识到这种图片苹果官方肯定是提供的。</p>
<p>于是很轻松就找到了 <a href="https://developer.apple.com/app-store/marketing/guidelines/" target="_blank" rel="external">App Store Marketing Guidelines</a>，里面给出了所有可能用到的图片资源，包括所有语言的 Download on the App Store 按钮图片、所有苹果设备的图片等。以及在宣传品中使用这些图片时的规范要求。</p>
<a id="more"></a>
<ul>
<li><p>Download one the App Store Badge<br><img src="http://stoneark.qiniudn.com/blogimg/download_on_the_app_store_image_3.png" alt="Download on the App Store Badge"></p>
</li>
<li><p>Apple Product Images<br><img src="http://stoneark.qiniudn.com/blogimg/download_on_the_app_store_image_4.png" alt="Apple Product Images"></p>
</li>
</ul>
<p>看了一下，国内按照苹果这个标准来的不多，违反规定的一抓一大把。比如<a href="http://d.xiaojukeji.com/c/70205" target="_blank" rel="external">滴滴出行的下载页面</a>，就错误地使用了 Apple 的 Logo：</p>
<p><img src="http://stoneark.qiniudn.com/blogimg/download_on_the_app_store_image_1.png" alt="Didichuxing"></p>
<p>这在 <code>1.6 Avoid mistakes</code> 里有专门的说明。<br><img src="http://stoneark.qiniudn.com/blogimg/download_on_the_app_store_image.png" alt="Avoid mistakes"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前做 App 的下载页面时，都是只需要简体中文就够了，所以“从 App Store 下载”的图片是在网上随便找了一个用的。这次还需要繁体中文和英文的图片，刚想搜索一下，突然意识到这种图片苹果官方肯定是提供的。&lt;/p&gt;
&lt;p&gt;于是很轻松就找到了 &lt;a href=&quot;https://developer.apple.com/app-store/marketing/guidelines/&quot;&gt;App Store Marketing Guidelines&lt;/a&gt;，里面给出了所有可能用到的图片资源，包括所有语言的 Download on the App Store 按钮图片、所有苹果设备的图片等。以及在宣传品中使用这些图片时的规范要求。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://blog.stoneark.org/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>The new Media Manager on iTunes Connect</title>
    <link href="http://blog.stoneark.org/2016/08/10/the-new-media-manager-on-itunes-connect/"/>
    <id>http://blog.stoneark.org/2016/08/10/the-new-media-manager-on-itunes-connect/</id>
    <published>2016-08-10T03:29:16.000Z</published>
    <updated>2016-08-26T06:18:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>收到一封来自苹果的邮件，说是最新的 Media Manager 已经上线 iTunes Connect 了。</p>
<p>管理屏幕截图差不多是 iTunes Connect 里最麻烦的。最初只有一两种屏幕尺寸时还好，现在 iPhone 有四种尺寸，iPad 有两种尺寸，如果再需要支持多种语言，那上传图片的人基本就要疯了。比如词记提供 4 张截图，每种设备都有对应的截图，目前支持 3 种语言，那么总共就有 4 × (4+2) × 3 = 72 张图片。截图、压缩、上传，还是很磨性子的。相信我，这个数量不算多。</p>
<a id="more"></a>
<p>今年的 WWDC 上苹果提出了 Media Manager 来专门解决这个问题，但今天实际一看，并没有那么神奇。它的原理是让你可以只上传最大尺寸、主要语言的图片，其他屏幕尺寸的都显示最大尺寸的图片，其他语言的都显示主要语言的图片－－是的，它并没有神奇地帮我们把图片处理成对应的情况，只是缩放和能凑合看而已。如果你是完美主义者，照样需要为每一种屏幕尺寸、每一种语言都上传对应的图片。</p>
<ul>
<li>默认只显示最大尺寸：<br><img src="http://stoneark.qiniudn.com/blogimg/itc_media_manager_0.png" alt=""></li>
</ul>
<ul>
<li>其他语言可以勾选使用主要语言的图片：<br><img src="http://stoneark.qiniudn.com/blogimg/itc_media_manager_1.png" alt=""></li>
</ul>
<ul>
<li>Media Manager 里依然需要管理各个尺寸和各个语言的截图：<br><img src="http://stoneark.qiniudn.com/blogimg/itc_media_manager_2.png" alt=""></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;收到一封来自苹果的邮件，说是最新的 Media Manager 已经上线 iTunes Connect 了。&lt;/p&gt;
&lt;p&gt;管理屏幕截图差不多是 iTunes Connect 里最麻烦的。最初只有一两种屏幕尺寸时还好，现在 iPhone 有四种尺寸，iPad 有两种尺寸，如果再需要支持多种语言，那上传图片的人基本就要疯了。比如词记提供 4 张截图，每种设备都有对应的截图，目前支持 3 种语言，那么总共就有 4 × (4+2) × 3 = 72 张图片。截图、压缩、上传，还是很磨性子的。相信我，这个数量不算多。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://blog.stoneark.org/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>UIActivityViewController</title>
    <link href="http://blog.stoneark.org/2016/08/08/ui-activity-view-controller/"/>
    <id>http://blog.stoneark.org/2016/08/08/ui-activity-view-controller/</id>
    <published>2016-08-08T08:03:19.000Z</published>
    <updated>2016-08-26T06:18:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>做社会化分享，经典的做法就是在各个社会化平台申请 App Key，然后集成各个平台的 SDK，并分别进行开发。更简单的方式是用类似友盟分享 SDK、ShareSDK 之类的集成化 SDK，让多平台分享的开发更加容易。之前我和团队就是采用这种方式。</p>
<p>其实 iOS 本身提供了一种分享的方式，App Store 里的分享就是一个实现的例子：<br><img src="http://stoneark.qiniudn.com/blogimg/uiactivityviewcontroller.png" alt="UIActivityViewController"></p>
<p>这个弹出的分享框，叫做 UIActivityViewController。通过它来实现分享，好处是样式统一、实现简单，更重要的是它直接使用系统中设置的平台账号，并且不需要对应用进行授权。这一点降低了用户分享的心理负担。同时，开发者不需要去平台为应用申请 App Key，也一定程度上降低了开发的门槛。<br><a id="more"></a></p>
<p>但正是因为这种分享不依附于应用，所以也会带来一些缺点。比如分享出去的东西会显示“来自 iOS” 而不是你的应用，也导致了不能进行用户统计。而且通过这个只能做分享，不能用做 SSO 登录。对于只需要分享的简单场景下，用 UIActivityViewController 完全足够并且更加合适，所以我在词记里尝试了一下。</p>
<p>基本的实现非常简单，把需要分享的内容，可以是文字、图片、链接，传入初始化方法即可：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *str = <span class="string">@"Hello"</span>;</div><div class="line"><span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://www.stoneark.org"</span>];</div><div class="line"><span class="built_in">UIActivityViewController</span> *activityViewController = [[<span class="built_in">UIActivityViewController</span> alloc] initWithActivityItems:@[str, url] applicationActivities:<span class="literal">nil</span>];</div><div class="line">[<span class="keyword">self</span> presentViewController:activityViewController animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</div></pre></td></tr></table></figure>
<p>如果需要为不同平台提供不同的分享内容，或者生成某个分享内容的过程较复杂，可以为这个内容创建一个 UIActivityItemProvider 的子类，并实现方法 <code>-(id)activityViewController: itemForActivityType:</code>，如：</p>
<figure class="highlight objc"><figcaption><span>ShareTextProvider</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MonthViewShareTextProvider</span> : <span class="title">UIActivityItemProvider</span></span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *shareText;</div><div class="line"><span class="keyword">@end</span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MonthViewShareTextProvider</span></span></div><div class="line">- (<span class="keyword">id</span>)activityViewController:(<span class="built_in">UIActivityViewController</span> *)activityViewController itemForActivityType:(<span class="built_in">NSString</span> *)activityType &#123;</div><div class="line">    <span class="keyword">if</span> ([activityType isEqualToString:<span class="built_in">UIActivityTypeSaveToCameraRoll</span>] ||</div><div class="line">        [activityType isEqualToString:<span class="built_in">UIActivityTypePrint</span>] ||</div><div class="line">        [activityType isEqualToString:<span class="built_in">UIActivityTypeCopyToPasteboard</span>] ||</div><div class="line">        [activityType isEqualToString:<span class="string">@"com.tencent.xin.sharetimeline"</span>] ) &#123;</div><div class="line">        <span class="comment">// 保存到相册、打印、复制、分享到微信，不提供文字</span></div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> _shareText;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>利用它去初始化 UIActivityViewController 时：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ShareTextProvider *textProvider = [[ShareTextProvider alloc]initWithPlaceholderItem:<span class="string">@"Hello"</span>];</div><div class="line">[textProvider setShareText:<span class="string">@"Hello"</span>];    </div><div class="line"><span class="built_in">UIActivityViewController</span> *activityViewController = [[<span class="built_in">UIActivityViewController</span> alloc]initWithActivityItems:@[textProvider] applicationActivities:<span class="literal">nil</span>];    </div><div class="line">[<span class="keyword">self</span> presentViewController:activityViewController animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</div></pre></td></tr></table></figure>
<p>注意初始化方法里的 PlaceholderItem，它应该是能够正确反应内容数据类型的简单数据。在弹出的 UIActivityViewController 里，会根据这些 PlaceholderItem 的类型，来决定显示哪些选项，此时并不会去调用 ItemProvider 里的方法。比如有两个 UIImage，则会显示“存储 2 张图片”；如果没有 UIImage，则不会显示存储图片这一个按钮。当你真正点击某一项分享渠道时，才会调用其 itemForActivityType 方法来得到真正的内容。</p>
<p>你可能注意到了，上面微信的 activity type 用了字符串 @”com.tencent.xin.sharetimeline”。而关于 UIActivityType，查看 <code>UIActivityType.h</code>，可以看到这些：</p>
<figure class="highlight objc"><figcaption><span>UIActivity.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UIActivityTypePostToFacebook</span>     <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0) __TVOS_PROHIBITED;</div><div class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UIActivityTypePostToTwitter</span>      <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0) __TVOS_PROHIBITED;</div><div class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UIActivityTypePostToWeibo</span>        <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0) __TVOS_PROHIBITED;    <span class="comment">// SinaWeibo</span></div><div class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UIActivityTypeMessage</span>            <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0) __TVOS_PROHIBITED;</div><div class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UIActivityTypeMail</span>               <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0) __TVOS_PROHIBITED;</div><div class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UIActivityTypePrint</span>              <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0) __TVOS_PROHIBITED;</div><div class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UIActivityTypeCopyToPasteboard</span>   <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0) __TVOS_PROHIBITED;</div><div class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UIActivityTypeAssignToContact</span>    <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0) __TVOS_PROHIBITED;</div><div class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UIActivityTypeSaveToCameraRoll</span>   <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0) __TVOS_PROHIBITED;</div><div class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UIActivityTypeAddToReadingList</span>   <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0) __TVOS_PROHIBITED;</div><div class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UIActivityTypePostToFlickr</span>       <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0) __TVOS_PROHIBITED;</div><div class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UIActivityTypePostToVimeo</span>        <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0) __TVOS_PROHIBITED;</div><div class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UIActivityTypePostToTencentWeibo</span> <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0) __TVOS_PROHIBITED;</div><div class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UIActivityTypeAirDrop</span>            <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0) __TVOS_PROHIBITED;</div><div class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UIActivityTypeOpenInIBooks</span>       <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">9</span>_0) __TVOS_PROHIBITED;</div></pre></td></tr></table></figure>
<p>里面并没有发现微信。通过运行时打印，可以整理出如下的表格：</p>
<table>
<thead>
<tr>
<th>方式</th>
<th>字符串常量</th>
<th>字符串内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>AirDrop</td>
<td>UIActivityTypeAirDrop</td>
<td>com.apple.UIKit.activity.AirDrop</td>
</tr>
<tr>
<td>SMS</td>
<td>UIActivityTypeMessage</td>
<td>com.apple.UIKit.activity.Message</td>
</tr>
<tr>
<td>Mail</td>
<td>UIActivityTypeMail</td>
<td>com.apple.UIKit.activity.Mail</td>
</tr>
<tr>
<td>备忘录</td>
<td>N/A</td>
<td>com.apple.mobilenotes.SharingExtension</td>
</tr>
<tr>
<td>新浪微博</td>
<td>UIActivityTypePostToWeibo</td>
<td>com.apple.UIKit.activity.PostToWeibo</td>
</tr>
<tr>
<td>iBooks</td>
<td>UIActivityTypeOpenInIBooks</td>
<td>com.apple.UIKit.activity.OpenInIBooks</td>
</tr>
<tr>
<td>QQ</td>
<td>N/A</td>
<td>com.tencent.mqq.ShareExtension</td>
</tr>
<tr>
<td>微信</td>
<td>N/A</td>
<td>com.tencent.xin.sharetimeline</td>
</tr>
<tr>
<td>Twitter</td>
<td>UIActivityTypePostToTwitter</td>
<td>com.apple.UIKit.activity.PostToTwitter</td>
</tr>
<tr>
<td>Facebook</td>
<td>UIActivityTypePostToFacebook</td>
<td>com.apple.UIKit.activity.PostToFacebook</td>
</tr>
<tr>
<td>Flicker</td>
<td>UIActivityTypePostToFlickr</td>
<td>com.apple.UIKit.activity.PostToFlickr</td>
</tr>
<tr>
<td>Vimeo</td>
<td>UIActivityTypePostToVimeo</td>
<td>com.apple.UIKit.activity.PostToVimeo</td>
</tr>
<tr>
<td>腾讯微博</td>
<td>UIActivityTypePostToTencentWeibo</td>
<td>com.apple.UIKit.activity.TencentWeibo</td>
</tr>
<tr>
<td>提醒事项</td>
<td>N/A</td>
<td>com.apple.reminders.RemindersEditorExtension</td>
</tr>
<tr>
<td>保存到相册</td>
<td>UIActivityTypeSaveToCameraRoll</td>
<td>com.apple.UIKit.activity.SaveToCameraRoll</td>
</tr>
<tr>
<td>指定到联系人</td>
<td>UIActivityTypeAssignToContact</td>
<td>com.apple.UIKit.activity.AssignToContact</td>
</tr>
<tr>
<td>复制到剪贴板</td>
<td>UIActivityTypeCopyToPasteboard</td>
<td>com.apple.UIKit.activity.CopyToPasteboard</td>
</tr>
<tr>
<td>打印</td>
<td>UIActivityTypePrint</td>
<td>com.apple.UIKit.activity.Print</td>
</tr>
<tr>
<td>添加到阅读列表</td>
<td>UIActivityTypeAddToReadingList</td>
<td>com.apple.UIKit.activity.AddToReadingList</td>
</tr>
</tbody>
</table>
<p>可以查阅 <a href="http://nshipster.com/uiactivityviewcontroller/" target="_blank" rel="external">NSHipster上的这篇文章</a>了解有关 UIActivityViewController 的更多信息。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做社会化分享，经典的做法就是在各个社会化平台申请 App Key，然后集成各个平台的 SDK，并分别进行开发。更简单的方式是用类似友盟分享 SDK、ShareSDK 之类的集成化 SDK，让多平台分享的开发更加容易。之前我和团队就是采用这种方式。&lt;/p&gt;
&lt;p&gt;其实 iOS 本身提供了一种分享的方式，App Store 里的分享就是一个实现的例子：&lt;br&gt;&lt;img src=&quot;http://stoneark.qiniudn.com/blogimg/uiactivityviewcontroller.png&quot; alt=&quot;UIActivityViewController&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个弹出的分享框，叫做 UIActivityViewController。通过它来实现分享，好处是样式统一、实现简单，更重要的是它直接使用系统中设置的平台账号，并且不需要对应用进行授权。这一点降低了用户分享的心理负担。同时，开发者不需要去平台为应用申请 App Key，也一定程度上降低了开发的门槛。&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://blog.stoneark.org/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Input character by hex unicode on mac</title>
    <link href="http://blog.stoneark.org/2016/08/01/input-char-by-hex-unicode-on-mac/"/>
    <id>http://blog.stoneark.org/2016/08/01/input-char-by-hex-unicode-on-mac/</id>
    <published>2016-08-01T09:35:05.000Z</published>
    <updated>2016-08-25T09:42:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>有时需要通过十六进制 Unicode 来输入特殊字符，Mac OS X 提供了一个专门的输入法。在键盘偏好设置中，添加输入源，在其他中有一项“Unicode 十六进制输入”，添加它即可。<br><img src="http://stoneark.qiniudn.com/blogimg/input_hex_unicode.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时需要通过十六进制 Unicode 来输入特殊字符，Mac OS X 提供了一个专门的输入法。在键盘偏好设置中，添加输入源，在其他中有一项“Unicode 十六进制输入”，添加它即可。&lt;br&gt;&lt;img src=&quot;http://stoneark.qiniudn.com/bl
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Emoji bug of Ciji</title>
    <link href="http://blog.stoneark.org/2016/07/30/emoji-bug-of-ciji/"/>
    <id>http://blog.stoneark.org/2016/07/30/emoji-bug-of-ciji/</id>
    <published>2016-07-30T07:49:06.000Z</published>
    <updated>2016-08-26T06:15:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>前几天，Dawncold 捉到一个词记的 bug：</p>
<p><img src="http://stoneark.qiniudn.com/blogimg/emoji_bug_0.jpeg" alt=""></p>
<p>是下暴雨的那天，输入的是下雨的 emoji 表情：☔️。</p>
<p>试了一下，在 TextField 编辑状态还是正常的，退出编辑状态后就成这样子了。另外，除了这个下雨的表情外，还有几个经典的 emoji 也显示成了黑白颜色的，但好在还是一个字符，没有出现后面的 VS16。基本可以锁定是字体的原因。</p>
<a id="more"></a>
<p>先查看了下雨的编码，在表情与符号里拷贝字符简介：<br><img src="http://stoneark.qiniudn.com/blogimg/emoji_bug_1.png" alt=""></p>
<p>粘贴出来可以看到这个 emoji 编码是 U+2614 U+FE0F：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">☔️</div><div class="line">有雨</div><div class="line">Unicode: U+2614 U+FE0F，UTF-8: E2 98 94 EF B8 8F</div></pre></td></tr></table></figure>
<p>为了营造回忆的气氛，词记选用了花园明朝体，打开 ttf 文件后查看 U+2614 和 U+FE0F 位置的字符：</p>
<p><img src="http://stoneark.qiniudn.com/blogimg/emoji_bug_2.png" alt="U+2614"></p>
<p><img src="http://stoneark.qiniudn.com/blogimg/emoji_bug_3.png" alt="U+FE0F"></p>
<p>果然没错，就是字体里面覆盖了一部分的 emoji 表情导致的，还能找到其他一些 emoji 表情：<br><img src="http://stoneark.qiniudn.com/blogimg/emoji_bug_4.png" alt="emojis"></p>
<p>可能是花园明朝体在开始制作的时候，主流操作系统对 emoji 表情的支持还不到位，所以在字体文件里加入了一些 emoji 符号。当你输入这些表情时，因为字体里有这些符号，所以会显示字体里面的符号，而不会显示系统默认的彩色 emoji 字体。</p>
<p>但是，下雨表情里后面那个 VS16 是什么鬼？为什么这个下雨表情，由两个 Unicode 组成？</p>
<p>表示下雨的字符就是前面的 U+2614，而后面的 VS16 表示第 16 号字形变体(Variation Selector)。用 iOS 的表情键盘输入的下雨表情，默认就是第 16 号变体，在苹果的 emoji 字体里，就是一把蓝色的雨伞，上面五个雨滴。一个表情允许有多种不同的展示形式，比如苹果系统中有关人物的 emoji 表情都可以选择不同的肤色，就是采用了这种字形变体的方式。</p>
<p>于是这个 bug 就容易解决了，删掉所有的表情就好了，这样就会用系统的 emoji 字体进行显示。</p>
<p>另外，在浏览这个 ttf 文件时，发现了 Unicode 标准中很多有意思的符号，比如：<br><img src="http://stoneark.qiniudn.com/blogimg/emoji_bug_5.png" alt=""></p>
<p>各种奇怪的性别：<br><img src="http://stoneark.qiniudn.com/blogimg/emoji_bug_6.png" alt=""></p>
<p>还专门定义了各种单位：<br><img src="http://stoneark.qiniudn.com/blogimg/emoji_bug_7.png" alt=""></p>
<p>音乐符号：<br><img src="http://stoneark.qiniudn.com/blogimg/emoji_bug_8.png" alt=""></p>
<p>回收标记：<br><img src="http://stoneark.qiniudn.com/blogimg/emoji_bug_9.png" alt=""></p>
<p>镰刀和锄头：<br><img src="http://stoneark.qiniudn.com/blogimg/emoji_bug_10.png" alt=""></p>
<p>麻将牌：<br><img src="http://stoneark.qiniudn.com/blogimg/emoji_bug_11.png" alt=""></p>
<p>扑克牌：<br><img src="http://stoneark.qiniudn.com/blogimg/emoji_bug_12.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天，Dawncold 捉到一个词记的 bug：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://stoneark.qiniudn.com/blogimg/emoji_bug_0.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;是下暴雨的那天，输入的是下雨的 emoji 表情：☔️。&lt;/p&gt;
&lt;p&gt;试了一下，在 TextField 编辑状态还是正常的，退出编辑状态后就成这样子了。另外，除了这个下雨的表情外，还有几个经典的 emoji 也显示成了黑白颜色的，但好在还是一个字符，没有出现后面的 VS16。基本可以锁定是字体的原因。&lt;/p&gt;
    
    </summary>
    
    
      <category term="font" scheme="http://blog.stoneark.org/tags/font/"/>
    
  </entry>
  
  <entry>
    <title>Retina image in markdown</title>
    <link href="http://blog.stoneark.org/2016/07/26/retina-image-in-markdown/"/>
    <id>http://blog.stoneark.org/2016/07/26/retina-image-in-markdown/</id>
    <published>2016-07-26T06:23:35.000Z</published>
    <updated>2016-08-25T09:57:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近写的带图片的博客越看越觉得不顺眼，感觉很乱。今天想了想终于知道了原因，原因在于这些图片是在 Retina 屏幕上截的图，图片尺寸都比正常大了一倍。而把它放到 markdown 文档里，会被按照通常的一倍尺寸进行显示，图片过大就显得很乱。</p>
<p>可惜的是，markdown 的图片标签并没有提供设置图片宽高的方法（有些方言增加了支持）。但好在 markdown 里可以随意插入 html，所以对于之前截的图片，用 html 的 <img> 标签进行了替换，里面直接指定了图片宽高为实际的一半，就感觉舒服多了。以后写博客再需要截图时，要先缩小图片尺寸再上传。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近写的带图片的博客越看越觉得不顺眼，感觉很乱。今天想了想终于知道了原因，原因在于这些图片是在 Retina 屏幕上截的图，图片尺寸都比正常大了一倍。而把它放到 markdown 文档里，会被按照通常的一倍尺寸进行显示，图片过大就显得很乱。&lt;/p&gt;
&lt;p&gt;可惜的是，mark
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>乌云停摆/回家吃饭 app 前途堪忧</title>
    <link href="http://blog.stoneark.org/2016/07/25/wooyun-closed-and-home-cook-app-policy/"/>
    <id>http://blog.stoneark.org/2016/07/25/wooyun-closed-and-home-cook-app-policy/</id>
    <published>2016-07-25T05:59:47.000Z</published>
    <updated>2016-08-25T06:22:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.wooyun.org" target="_blank" rel="external">乌云</a>关闭了，最大的漏洞报告平台。希望是暂时的。</p>
<p><img src="http://stoneark.qiniudn.com/blogimg/wooyun_closed.png" alt="Wooyun"></p>
<p><a href="http://www.jiashuangkuaizi.com" target="_blank" rel="external">回家吃饭</a>，又一个很好的互联网尝试，但是貌似也要面临很大的政策风险。食品安全相当重要，固然需要监管。不过貌似即使处于监管之下，卫生状况也不一定怎么样。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.wooyun.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;乌云&lt;/a&gt;关闭了，最大的漏洞报告平台。希望是暂时的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://stoneark.qiniudn.com/b
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>盲目爱国主义</title>
    <link href="http://blog.stoneark.org/2016/07/20/blind-patriotism/"/>
    <id>http://blog.stoneark.org/2016/07/20/blind-patriotism/</id>
    <published>2016-07-20T09:14:55.000Z</published>
    <updated>2016-08-26T04:56:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近由于南海事件，网民们的爱国情绪空前高涨。但朋友圈中蔓延的盲目爱国主义，让人看到了网络舆论的可怕。</p>
<p>首先是前年 CCTV 的一则针对 iPhone 的新闻报道，内容是指责 iPhone 会不断对手机进行定位并记录下来。抛开内容是否足够公正不谈，这则“新闻”也早就不是新闻了。如果去核对左下角的日期和星期几，可以很容易地发现这是前年播出的新闻，但巧合的是这则新闻播出时正好也是 7 月份。大多数网民也根本是看个热闹，积极转发，吓坏了手里拿着 iPhone 的小伙伴们。</p>
<a id="more"></a>
<p>然后又出现了关于 iPhone 输入法的舆论，说是在 iPhone 上输入“击沉”后，输入法会出现提示“中国”。这可是了不起的证据，这下看你苹果怎么解释。很多网友试都不试也就友情转发了。</p>
<p>再接下来就是各种禁售 iPhone 的假新闻了。有 CCTV 版，有天安门前 LED 版，仔细看看稍微思考一下就知道是假的，但依然在祖国大地的朋友圈传播得有模有样。</p>
<p>这一系列针对 iPhone 的网络舆论，第一个是苹果为了提供更个人化的服务，进行的常去地点统计，可以推测出你的家庭住址、工作地点、每天的交通规律等，提前为你查询交通状况并预测出行所需时间，展示在通知栏里。如果你并不需要这个功能，也可以很容易地把它关掉。苹果有没有妥善地加密这些信息，有没有把这些信息上传或泄漏，甚至会不会影响到国家安全，我不能做出保证。但在 Apple 和 CCTV 中间，我选择相信 Apple。</p>
<p>第二个，是现在所有输入法都具有的功能，就是个人词库和云词库嘛。所以，这事儿不应该怪 Apple，应该怪频繁输入这些词语的国人。第三个，现在好多人动不动就吆喝着抵制、禁售，这都是没知识的表现。不只苹果，就连肯德基麦当劳这次都躺枪了。</p>
<p>更让人可惜的是，竟然有很多高学历知识分子、很多年轻人热情地转发这些舆论，并热血地评论要抵制。可笑的是后面还带了个“来自 iPhone”的小尾巴，你倒是扔了啊…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近由于南海事件，网民们的爱国情绪空前高涨。但朋友圈中蔓延的盲目爱国主义，让人看到了网络舆论的可怕。&lt;/p&gt;
&lt;p&gt;首先是前年 CCTV 的一则针对 iPhone 的新闻报道，内容是指责 iPhone 会不断对手机进行定位并记录下来。抛开内容是否足够公正不谈，这则“新闻”也早就不是新闻了。如果去核对左下角的日期和星期几，可以很容易地发现这是前年播出的新闻，但巧合的是这则新闻播出时正好也是 7 月份。大多数网民也根本是看个热闹，积极转发，吓坏了手里拿着 iPhone 的小伙伴们。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Swift 编程思路的变化</title>
    <link href="http://blog.stoneark.org/2016/07/05/changes-about-programming-thinking-in-swift/"/>
    <id>http://blog.stoneark.org/2016/07/05/changes-about-programming-thinking-in-swift/</id>
    <published>2016-07-05T08:46:19.000Z</published>
    <updated>2016-08-24T07:15:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天看到<a href="http://alisoftware.github.io/swift/2015/09/06/thinking-in-swift-1/" target="_blank" rel="external">这篇文章</a>，才发现之前那次尝试着用 Swift 写代码时犯了一个多大的错误。</p>
<p>上次是在做优优育儿时，有一个新功能非常简单，就是一个单纯的列表页，所以尝试着用 Swift 进行了实现。而我当时正是像文章中写的那样，只是把之前 Objective-C 的写法按照 Swift 的语法进行了变化，然后相信了 Xcode 的代码更正提示，结果虽然可以正常运行，但代码里全是 exclamation mark。</p>
<p>阅读了这个系列的文章，发现 Swift 的确是个现代化的语言。虽然凭借传统语言的知识可以很容易地入手，但它所带来的不仅仅是语法的改变，更多的是编程思路的变化。</p>
<p>下面我将分别展示三段代码，功能是从 JSON 串中得到一个 Article 对象的数组。第一段是用 Objective-C 编写的代码，这也是我写这种功能的标准形式。第二段是按照传统思路编写的 Swift 代码，是应该避免的。第三段是用正确的思路编写的 Swift 代码。</p>
<a id="more"></a>
<h3 id="第一段代码"><a href="#第一段代码" class="headerlink" title="第一段代码"></a>第一段代码</h3><figure class="highlight objc"><figcaption><span>ArticleObject.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ArticleObject</span> : <span class="title">NSObject</span></span></div><div class="line">+ (<span class="built_in">NSArray</span>*)articleArrayWithJSONData:(<span class="built_in">NSData</span>*)data;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objc"><figcaption><span>ArticleObject.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ArticleObject.h"</span></span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ArticleObject</span>()</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *objectID;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *title;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSURL</span> *url;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ArticleObject</span></span></div><div class="line">+ (<span class="built_in">NSArray</span>*)articleArrayWithJSONData:(<span class="built_in">NSData</span>*)data &#123;</div><div class="line">    <span class="built_in">NSArray</span> *arrData = [<span class="built_in">NSJSONSerialization</span> JSONObjectWithData:data options:<span class="number">0</span> error:<span class="literal">nil</span>];</div><div class="line">    <span class="built_in">NSMutableArray</span> *arrArticle = [[<span class="built_in">NSMutableArray</span> alloc]init];</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSDictionary</span> *dictItem <span class="keyword">in</span> arrData) &#123;</div><div class="line">        ArticleObject *articleObj = [[ArticleObject alloc]initWithDictionary:dictItem];</div><div class="line">        [arrArticle addObject:articleObj];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> arrArticle;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)initWithDictionary:(<span class="built_in">NSDictionary</span>*)dict &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</div><div class="line">        [<span class="keyword">self</span> setWithDictionary:dict];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setWithDictionary:(<span class="built_in">NSDictionary</span>*)dict &#123;</div><div class="line">    [<span class="keyword">self</span> setObjectID:dict[<span class="string">@"id"</span>]];</div><div class="line">    [<span class="keyword">self</span> setTitle:dict[<span class="string">@"title"</span>]];</div><div class="line">    [<span class="keyword">self</span> setUrl:[<span class="built_in">NSURL</span> URLWithString:dict[<span class="string">@"url"</span>]]];</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h3 id="第二段代码"><a href="#第二段代码" class="headerlink" title="第二段代码"></a>第二段代码</h3><p>可以看到，这段代码完全就是上面代码的 Swift 版，很容易理解，但里面有很多的惊叹号。至于为什么这样做非常不好，可以参见最开头提到的文章。</p>
<figure class="highlight swift"><figcaption><span>ArticleObject.swift</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleObject</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> objectID: <span class="type">String</span> = <span class="string">""</span></div><div class="line">    <span class="keyword">var</span> title: <span class="type">String</span> = <span class="string">""</span></div><div class="line">    <span class="keyword">var</span> url: <span class="type">NSURL</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">articleArrayWithJSONData</span><span class="params">(data: NSData)</span></span> -&gt; <span class="type">NSArray</span> &#123;</div><div class="line">        <span class="keyword">let</span> arrData: <span class="type">NSArray</span> = <span class="keyword">try</span>! <span class="type">NSJSONSerialization</span>.<span class="type">JSONObjectWithData</span>(data, options: []) <span class="keyword">as</span>! <span class="type">NSArray</span></div><div class="line">        <span class="keyword">let</span> arrArticle: <span class="type">NSMutableArray</span> = <span class="type">NSMutableArray</span>()</div><div class="line">        <span class="keyword">for</span> dictItem <span class="keyword">in</span> arrData &#123;</div><div class="line">            <span class="keyword">let</span> articleObj : <span class="type">ArticleObject</span> = <span class="type">ArticleObject</span>()</div><div class="line">            articleObj.setWithDictionary(dictItem <span class="keyword">as</span>! <span class="type">NSDictionary</span>)</div><div class="line">            arrArticle.addObject(articleObj)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> arrArticle</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setWithDictionary</span><span class="params">(dict: NSDictionary)</span></span> &#123;</div><div class="line">        <span class="keyword">self</span>.objectID = dict[<span class="string">"id"</span>] <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">        <span class="keyword">self</span>.title = dict[<span class="string">"title"</span>] <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">        <span class="keyword">self</span>.url = <span class="type">NSURL</span>(string: dict[<span class="string">"url"</span>] <span class="keyword">as</span>! <span class="type">String</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="第三段代码"><a href="#第三段代码" class="headerlink" title="第三段代码"></a>第三段代码</h3><p>这里面就有很多 Swift 的新东西了，比如 guard let, if let, flatMap 等。虽然代码好像更长了，也不那么易懂了，但这才是更安全可靠的代码。</p>
<figure class="highlight swift"><figcaption><span>ArticleObject.swift</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleObject</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> objectID: <span class="type">String</span></div><div class="line">    <span class="keyword">var</span> title: <span class="type">String</span></div><div class="line">    <span class="keyword">var</span> url: <span class="type">NSURL</span></div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">articleArrayWithJSONData</span><span class="params">(data: NSData)</span></span> -&gt; [<span class="type">ArticleObject</span>] &#123;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> jsonData = <span class="keyword">try</span>? <span class="type">NSJSONSerialization</span>.<span class="type">JSONObjectWithData</span>(data, options: []),</div><div class="line">            <span class="keyword">let</span> arrData = jsonData <span class="keyword">as</span>? <span class="type">Array</span>&lt;<span class="type">Dictionary</span>&lt;<span class="type">String</span>,<span class="type">AnyObject</span>&gt;&gt;</div><div class="line">            <span class="keyword">else</span> &#123;<span class="keyword">return</span>[]&#125;</div><div class="line">        <span class="keyword">return</span> arrData.flatMap&#123;(dictItem: <span class="type">Dictionary</span>&lt;<span class="type">String</span>,<span class="type">AnyObject</span>&gt;) -&gt; <span class="type">ArticleObject</span>? <span class="keyword">in</span></div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> articleObj: <span class="type">ArticleObject</span> = <span class="type">ArticleObject</span>(dictionary: dictItem) &#123;</div><div class="line">                <span class="keyword">return</span> articleObj</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">init</span>?(dictionary: [<span class="type">String</span>:<span class="type">AnyObject</span>]) &#123;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> objectID = dictionary[<span class="string">"id"</span>] <span class="keyword">as</span>? <span class="type">String</span>,</div><div class="line">            <span class="keyword">let</span> title = dictionary[<span class="string">"title"</span>] <span class="keyword">as</span>? <span class="type">String</span>,</div><div class="line">            <span class="keyword">let</span> urlString = dictionary[<span class="string">"url"</span>] <span class="keyword">as</span>? <span class="type">String</span>,</div><div class="line">            <span class="keyword">let</span> url = <span class="type">NSURL</span>(string: urlString)</div><div class="line">            <span class="keyword">else</span> &#123;<span class="keyword">return</span> <span class="literal">nil</span>&#125;</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.objectID = objectID;</div><div class="line">        <span class="keyword">self</span>.title = title;</div><div class="line">        <span class="keyword">self</span>.url = url;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setData</span><span class="params">(withDictionary: NSDictionary)</span></span> &#123;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> objectID = withDictionary[<span class="string">"id"</span>] <span class="keyword">as</span>? <span class="type">String</span>,</div><div class="line">            <span class="keyword">let</span> title = withDictionary[<span class="string">"title"</span>] <span class="keyword">as</span>? <span class="type">String</span>,</div><div class="line">            <span class="keyword">let</span> urlString = withDictionary[<span class="string">"url"</span>] <span class="keyword">as</span>? <span class="type">String</span>,</div><div class="line">            <span class="keyword">let</span> url = <span class="type">NSURL</span>(string: urlString)</div><div class="line">            <span class="keyword">else</span> &#123;<span class="keyword">return</span>&#125;</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.objectID = objectID;</div><div class="line">        <span class="keyword">self</span>.title = title;</div><div class="line">        <span class="keyword">self</span>.url = url;</div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天看到&lt;a href=&quot;http://alisoftware.github.io/swift/2015/09/06/thinking-in-swift-1/&quot;&gt;这篇文章&lt;/a&gt;，才发现之前那次尝试着用 Swift 写代码时犯了一个多大的错误。&lt;/p&gt;
&lt;p&gt;上次是在做优优育儿时，有一个新功能非常简单，就是一个单纯的列表页，所以尝试着用 Swift 进行了实现。而我当时正是像文章中写的那样，只是把之前 Objective-C 的写法按照 Swift 的语法进行了变化，然后相信了 Xcode 的代码更正提示，结果虽然可以正常运行，但代码里全是 exclamation mark。&lt;/p&gt;
&lt;p&gt;阅读了这个系列的文章，发现 Swift 的确是个现代化的语言。虽然凭借传统语言的知识可以很容易地入手，但它所带来的不仅仅是语法的改变，更多的是编程思路的变化。&lt;/p&gt;
&lt;p&gt;下面我将分别展示三段代码，功能是从 JSON 串中得到一个 Article 对象的数组。第一段是用 Objective-C 编写的代码，这也是我写这种功能的标准形式。第二段是按照传统思路编写的 Swift 代码，是应该避免的。第三段是用正确的思路编写的 Swift 代码。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="http://blog.stoneark.org/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>应用上线后 IAP 商品不会立即生效</title>
    <link href="http://blog.stoneark.org/2016/07/03/iap-take-effect-later-than-app-release/"/>
    <id>http://blog.stoneark.org/2016/07/03/iap-take-effect-later-than-app-release/</id>
    <published>2016-07-03T08:19:33.000Z</published>
    <updated>2016-08-23T08:28:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>应用和 IAP 项目均在 App Store 审核通过后，发现从 App Store 内下载的版本，无法正常获取到 IAP 商品信息，通过 product ID 获取 product 时，未能返回相应的 product。</p>
<p>测试环境（Sandbox）下一切正常，可根据 product ID 获取到 product，完成支付。</p>
<p>推测应该是由于 IAP 审核通过后并没有同步及时的上线，所以导致无法正常获取到 product，等待一段时间即可。（我等待了约 7 个小时就正常了，也有人等待了一两天）</p>
<p>所以在程序中要注意，如果获取不到 product 做相应的处理，防止程序崩溃。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;应用和 IAP 项目均在 App Store 审核通过后，发现从 App Store 内下载的版本，无法正常获取到 IAP 商品信息，通过 product ID 获取 product 时，未能返回相应的 product。&lt;/p&gt;
&lt;p&gt;测试环境（Sandbox）下一切正常，
    
    </summary>
    
    
      <category term="iOS" scheme="http://blog.stoneark.org/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>管理宽广而严格的广电总局</title>
    <link href="http://blog.stoneark.org/2016/06/30/the-strict-sapprft/"/>
    <id>http://blog.stoneark.org/2016/06/30/the-strict-sapprft/</id>
    <published>2016-06-30T07:49:54.000Z</published>
    <updated>2016-08-23T08:17:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="广电总局状告苹果-App-Store"><a href="#广电总局状告苹果-App-Store" class="headerlink" title="广电总局状告苹果 App Store"></a>广电总局状告苹果 App Store</h3><p>因为广电总局电影卫星频道节目制作中心具有电影《血搏敌枭》的独家网络传播权，而优酷侵权播放了这部电影，所以广电总局状告了苹果公司。</p>
<p>是不是很奇怪？优酷的错为什么状告苹果？</p>
<p>因为优酷的应用是通过苹果 App Store 下载的，所以，苹果，自然要怪你喽。</p>
<h3 id="广电总局要求审核国内游戏"><a href="#广电总局要求审核国内游戏" class="headerlink" title="广电总局要求审核国内游戏"></a>广电总局要求审核国内游戏</h3><p>苹果最终还是拿它没有任何办法，在最后一刻公布了这个决定。</p>
<p><img src="http://stoneark.qiniudn.com/blogimg/sapprft_will_review_game_in_appstore.png" alt=""></p>
<p>游戏个人开发者可以放弃了。但愿不要插手其他类型的应用。我们并不是怕审核，怕的是没有具体审核规则，怕的是自由裁量，怕的是复杂的审核流程、漫长的审核周期、徒增的审核成本，怕的是会应运而生的各种代理。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;广电总局状告苹果-App-Store&quot;&gt;&lt;a href=&quot;#广电总局状告苹果-App-Store&quot; class=&quot;headerlink&quot; title=&quot;广电总局状告苹果 App Store&quot;&gt;&lt;/a&gt;广电总局状告苹果 App Store&lt;/h3&gt;&lt;p&gt;因为广电总局
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Battery drainer gpsd</title>
    <link href="http://blog.stoneark.org/2016/06/18/battery-drainer-gpsd/"/>
    <id>http://blog.stoneark.org/2016/06/18/battery-drainer-gpsd/</id>
    <published>2016-06-18T07:20:52.000Z</published>
    <updated>2016-08-23T07:27:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>降级到 Kitkat 依然掉电凶猛，刷 MIUI 也是一样。查看电池记录，发现一个叫 gpsd 的进程耗费了大量的电量，但即使把 GPS 关掉也无济于事。在网上搜索，发现有很多 S4 用户都遭遇这个问题，有人说到空旷的地方用 GPS 定位一下就好了，但实测无效。用 Better battery life 查看，系统始终不会进入 Deep Sleep 状态，所以一直在唤醒。</p>
<p>找了很多方法，最后终于找到了一个管用的－－把 3G 网络禁用，只允许 2G 网络。不知道是什么原因，但事实证明的确只跟这个有关。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;降级到 Kitkat 依然掉电凶猛，刷 MIUI 也是一样。查看电池记录，发现一个叫 gpsd 的进程耗费了大量的电量，但即使把 GPS 关掉也无济于事。在网上搜索，发现有很多 S4 用户都遭遇这个问题，有人说到空旷的地方用 GPS 定位一下就好了，但实测无效。用 Bett
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>IMEI missing after downgrade Samsung S4</title>
    <link href="http://blog.stoneark.org/2016/06/17/imei-missing-after-downgrade-samsung-s4/"/>
    <id>http://blog.stoneark.org/2016/06/17/imei-missing-after-downgrade-samsung-s4/</id>
    <published>2016-06-17T03:11:09.000Z</published>
    <updated>2016-08-23T07:21:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近手机耗电严重 (Samsung S4 I9502)，充满后放一边不用，半天就电量告急了。恢复所有设置也不奏效，想降级到 Android Kitkat 试试。</p>
<p>从网上下载了 4.4.2 的官方五件套，然后按照网上的方法用 Odin 工具刷入。过程很顺利，重启后变成了 Kitkat 的风格，进入首次设置页面。但马上发现，右上角的信号位置，变成了 ⦸ 这样的符号。查看系统设置，或者拨号键盘输入 *#06#，发现 IMEI 丢失。</p>
<p>上网搜索，发现 Samsung 的机器有个叫 efs 的东西，其中保存了包括 IMEI 在内的一些信息。如果降级前没有备份的话，可能会丢失！绝望了好一阵儿，发现把 SIM 卡放到另一个卡槽里可以用，只不过另一个卡槽只支持 2G 网络。可是这让我越想越觉得奇怪，于是又下载了 5.0.1 的固件刷进去，发现 IMEI 回来了，这说明 efs 并没有丢失。马上 ROOT 之后备份 efs，继续折腾。</p>
<p>再次降级，依然没有信号。ROOT 后查看文件，发现 /efs 目录有个叫 <code>.nv_data.bak</code> 的文件，用这个文件替换这个目录下的 <code>nv_data.bin</code> 文件，然后删掉 <code>nv_data.bin.md5</code> 文件，重新手机，IMEI 恢复。</p>
<p>另外，如果只是把原有的 <code>nv_data.bin</code> 文件删掉，也能恢复信号，但是查看 IMEI，发现是一个不正确的 IMEI（一大串 0，后面是 0049）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近手机耗电严重 (Samsung S4 I9502)，充满后放一边不用，半天就电量告急了。恢复所有设置也不奏效，想降级到 Android Kitkat 试试。&lt;/p&gt;
&lt;p&gt;从网上下载了 4.4.2 的官方五件套，然后按照网上的方法用 Odin 工具刷入。过程很顺利，重启
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Travel in 2016</title>
    <link href="http://blog.stoneark.org/2016/06/06/travel-in-2016/"/>
    <id>http://blog.stoneark.org/2016/06/06/travel-in-2016/</id>
    <published>2016-06-06T10:03:31.000Z</published>
    <updated>2016-08-23T10:09:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>趁着最近空闲，分两次去了重庆、成都、青岛、日照、上海游玩。</p>
<h3 id="重庆"><a href="#重庆" class="headerlink" title="重庆"></a>重庆</h3><p>2016.3.30。山城。一个 3D 的城市。既有文化底蕴，又有现代繁华。夜晚的江景非常美。<br><img src="http://stoneark.qiniudn.com/blogimg/travel_2016_cq0.jpg" alt=""><br><img src="http://stoneark.qiniudn.com/blogimg/travel_2016_cq1.jpg" alt=""></p>
<h3 id="成都"><a href="#成都" class="headerlink" title="成都"></a>成都</h3><a id="more"></a>
<p>2016.4.3。蓉城。最早的城市，闲适的大都市。同样作为省会，比济南好太多。<br><img src="http://stoneark.qiniudn.com/blogimg/travel_2016_cd0.jpg" alt=""><br><img src="http://stoneark.qiniudn.com/blogimg/travel_2016_cd1.jpg" alt=""></p>
<h3 id="青岛"><a href="#青岛" class="headerlink" title="青岛"></a>青岛</h3><p>2016.5.28。山东省最不像山东的城市，德国的味道。正在修地铁。第二次来，现代化了许多。<br><img src="http://stoneark.qiniudn.com/blogimg/travel_2016_qd0.jpg" alt=""><br><img src="http://stoneark.qiniudn.com/blogimg/travel_2016_qd1.jpg" alt=""></p>
<h3 id="日照"><a href="#日照" class="headerlink" title="日照"></a>日照</h3><p>2016.5.30。母校变了一些。万平口准备收费。路上开始堵车了，修了条地下隧道。有了机场。<br><img src="http://stoneark.qiniudn.com/blogimg/travel_2016_rz0.jpg" alt=""><br><img src="http://stoneark.qiniudn.com/blogimg/travel_2016_rz1.jpg" alt=""><br><img src="http://stoneark.qiniudn.com/blogimg/travel_2016_rz2.jpg" alt=""><br><img src="http://stoneark.qiniudn.com/blogimg/travel_2016_rz3.jpg" alt=""></p>
<h3 id="上海"><a href="#上海" class="headerlink" title="上海"></a>上海</h3><p>2016.6.1。魔都。住在弄堂里。外滩的钟声、万国建筑。陆家嘴的东方明珠、三大高楼。城隍庙的蟹黄汤包、南翔馒头。<br><img src="http://stoneark.qiniudn.com/blogimg/travel_2016_sh0.jpg" alt=""><br><img src="http://stoneark.qiniudn.com/blogimg/travel_2016_sh1.jpg" alt=""><br><img src="http://stoneark.qiniudn.com/blogimg/travel_2016_sh2.jpg" alt=""><br><img src="http://stoneark.qiniudn.com/blogimg/travel_2016_sh3.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;趁着最近空闲，分两次去了重庆、成都、青岛、日照、上海游玩。&lt;/p&gt;
&lt;h3 id=&quot;重庆&quot;&gt;&lt;a href=&quot;#重庆&quot; class=&quot;headerlink&quot; title=&quot;重庆&quot;&gt;&lt;/a&gt;重庆&lt;/h3&gt;&lt;p&gt;2016.3.30。山城。一个 3D 的城市。既有文化底蕴，又有现代繁华。夜晚的江景非常美。&lt;br&gt;&lt;img src=&quot;http://stoneark.qiniudn.com/blogimg/travel_2016_cq0.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://stoneark.qiniudn.com/blogimg/travel_2016_cq1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;成都&quot;&gt;&lt;a href=&quot;#成都&quot; class=&quot;headerlink&quot; title=&quot;成都&quot;&gt;&lt;/a&gt;成都&lt;/h3&gt;
    
    </summary>
    
    
      <category term="travel" scheme="http://blog.stoneark.org/tags/travel/"/>
    
  </entry>
  
  <entry>
    <title>詞記 Release!</title>
    <link href="http://blog.stoneark.org/2016/06/04/ciji-release/"/>
    <id>http://blog.stoneark.org/2016/06/04/ciji-release/</id>
    <published>2016-06-04T09:59:05.000Z</published>
    <updated>2016-07-26T09:57:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>Dear friends,</em></p>
<p>我的最新作品，词记，已正式上线 App Store 啦！</p>
<p><img src="http://stoneark.qiniudn.com/appimg/ciji/brief.png" width="450"></p>
<h3 id="应用简介-Description"><a href="#应用简介-Description" class="headerlink" title="应用简介 (Description)"></a>应用简介 (Description)</h3><p>你一定写过日记。或许是小学语文老师布置的家庭作业，或许是青春期时懵懵懂懂的情感记忆，或许是长大后日记本里给自己的加油打气，或许是旅行在外每天晚上写下的旅途随笔。</p>
<p>词记，让你用一个独特的方式写日记。把今天所有的点点滴滴，在思绪中整理、精心挑选，然后只用一个词来概括。</p>
<p>或许随着时间流逝，再看到这些词时，早已想不起这词背后的故事。但这些故事给自己留下的感觉，却依然明晰：惊喜、开心、阳光明媚、意外收获，亦或失落、无聊、阴雨绵绵、心情好糟。</p>
<p>是的，这就是我们的生活。</p>
<p>词记，用一个词记录今天！<br>一天一个词，烦恼去无边～</p>
<p>You have ever written diary. Maybe homework assigned by your teacher, maybe affection memories in your teens, maybe “fighting” in your notebook after graduation, maybe notes in every evening on your trip.</p>
<p>Ciji (詞記), a special way to keep a diary. All things happened today, in mind, pick only one word to describe!</p>
<p>Time flies, maybe you cannot remember the things happened behind these words, but the feelings are clear: surprise, happy, sunshine, windfall, or disappointed, boring, rainy, restless, etc.</p>
<p>Yeah, it is our life.</p>
<p>Ciji (詞記), use one word to record today.<br>A word a day, keep the sadness away~</p>
<h3 id="应用下载-Download"><a href="#应用下载-Download" class="headerlink" title="应用下载 (Download)"></a>应用下载 (Download)</h3><p><a href="https://itunes.apple.com/cn/app/ci-ji-yong-yi-ge-ci-ji-lu-jin-tian/id1113379853?l=zh&amp;ls=1&amp;mt=8" target="_blank" rel="external"><img src="http://stoneark.qiniudn.com/appimg/appstore.png" width="150"></a></p>
<p>喜欢请五星好评哦！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;Dear friends,&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;我的最新作品，词记，已正式上线 App Store 啦！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://stoneark.qiniudn.com/appimg/ciji/brief.png&quot; width=&quot;450
    
    </summary>
    
    
      <category term="App" scheme="http://blog.stoneark.org/tags/App/"/>
    
  </entry>
  
  <entry>
    <title>iTunes Connect Error ITMS-90475</title>
    <link href="http://blog.stoneark.org/2016/05/26/itunes-connect-error-itms-90475/"/>
    <id>http://blog.stoneark.org/2016/05/26/itunes-connect-error-itms-90475/</id>
    <published>2016-05-26T08:58:59.000Z</published>
    <updated>2016-07-22T09:54:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>提交 binary 到 iTunes Connect 时，遇到了之前未遇到过的错误：</p>
<blockquote>
<p>ERROR ITMS-90475: “Invalid Bundle. iPad Multitasking support requires launch story board in bundle ‘org.stoneark.worddiary’.”</p>
</blockquote>
<p>原因是，iPad 程序（或者 Universal 程序），从 iOS 9 / Xcode 7 开始，默认要求支持多任务分屏。但这要求必须使用 Launch Storyboard，而不能再用 Launch Image。而正如<a href="/2016/05/19/bug-about-launchscreen-storyboard">之前说过的</a>，所以我并没有采用 Launch Storyboard，所以导致了这个问题。</p>
<p>目前可以暂时不支持多任务分屏，在工程属性的 General 里，把 <code>Requires full screen</code> 勾选上即可（会在 Info.plist 里增加字段 <code>UIRequiresFullScreen</code>）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;提交 binary 到 iTunes Connect 时，遇到了之前未遇到过的错误：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ERROR ITMS-90475: “Invalid Bundle. iPad Multitasking support requires laun
    
    </summary>
    
    
      <category term="iOS" scheme="http://blog.stoneark.org/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Application localization in iOS development</title>
    <link href="http://blog.stoneark.org/2016/05/25/application-localization-in-ios-development/"/>
    <id>http://blog.stoneark.org/2016/05/25/application-localization-in-ios-development/</id>
    <published>2016-05-25T08:35:16.000Z</published>
    <updated>2016-07-25T06:05:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>iOS 对国际化的支持是相对比较完善的。</p>
<h2 id="应用的国际化支持"><a href="#应用的国际化支持" class="headerlink" title="应用的国际化支持"></a>应用的国际化支持</h2><p>在 Project 属性中，有 Localizations 一项，在其中可以管理支持的语言列表，还可以选择是否开启 Base 语言。</p>
<p><img src="http://stoneark.qiniudn.com/blogimg/application_localization_in_ios_development_1.png" width="457"></p>
<h2 id="为资源文件开启国际化"><a href="#为资源文件开启国际化" class="headerlink" title="为资源文件开启国际化"></a>为资源文件开启国际化</h2><p>在资源文件（如 strings/xib/storyboard）的文件属性中，可以在 Localization 项中进行国际化语言的管理。如果尚未国际化，会有一个长长的 Localization 按钮，点击后开启这个文件的国际化。如果已国际化，会显示并可管理当前文件已支持的语言。</p>
<p><img src="http://stoneark.qiniudn.com/blogimg/application_localization_in_ios_development_2.png" width="259"></p>
<p>如果想取消对这个文件的国际化，在 Xcode 里做不到。唯一的办法是，去 Finder 里把各个语言的 .lproj 目录下的这个资源文件删掉，只留一份放到工程目录的最外层（而不从属与任何 .lproj 目录）。</p>
<h2 id="字符串的国际化："><a href="#字符串的国际化：" class="headerlink" title="字符串的国际化："></a>字符串的国际化：</h2><p>自己新建一个 String 文件到工程里，名为 <code>Localizable.strings</code> 即可。（这是默认的文件名，调用 <code>NSLocalizedString</code> 方法默认取这个文件，如果用了其他的文件名，则每次调用方法时，需要指定文件名）</p>
<p>例如，Localizable.strings 内容为：</p>
<figure class="highlight xml"><figcaption><span>Localizable.strings(Chinese (Simplified))</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">"Today" = "今天";</div><div class="line">"Yesterday" = "昨天";</div><div class="line">"%d days ago" = "%d天前";</div><div class="line">/* &#123;User First Name&#125;'s Profile */</div><div class="line">"%@'s Profile"="%@'s Profile";</div></pre></td></tr></table></figure>
<figure class="highlight xml"><figcaption><span>Localizable.strings(English)</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">"Today" = "Today";</div><div class="line">"Yesterday" = "Yesterday";</div><div class="line">"%d days ago" = "%d days ago";</div><div class="line">/* &#123;User First Name&#125;'s Profile */</div><div class="line">"%@'s Profile"="%@的个人资料";</div></pre></td></tr></table></figure>
<p>获取时：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *str;</div><div class="line">str = <span class="built_in">NSLocalizedString</span>(<span class="string">@"Today"</span>, <span class="literal">nil</span>);</div><div class="line"><span class="keyword">int</span> temp = <span class="number">3</span>;</div><div class="line">str = [<span class="built_in">NSString</span> stringWithFormat:<span class="built_in">NSLocalizedString</span>(<span class="string">@"%d days ago"</span>, <span class="literal">nil</span>), temp];</div><div class="line">str = [<span class="built_in">NSString</span> stringWithFormat:<span class="built_in">NSLocalizedString</span>(<span class="string">@"%@'s Profile"</span>, <span class="string">@"&#123;User First Name&#125;'s Profile"</span>), user.name];</div></pre></td></tr></table></figure>
<p>上面是常用的情况。还有一种复杂的情况，是在有些语言里，某两个参数的位置可能会颠倒，这时需要使用转义符：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;%@ Error! %@ failed!&quot; = &quot;%2$@ 失败了！％1$@ 错误了！&quot;;</div></pre></td></tr></table></figure>
<p>更为详细的可参照：<br><a href="http://nshipster.com/nslocalizedstring/" target="_blank" rel="external">http://nshipster.com/nslocalizedstring/</a><br><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/LoadingResources/Strings/Strings.html" target="_blank" rel="external">https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/LoadingResources/Strings/Strings.html</a><br><a href="https://developer.apple.com/library/ios/documentation/MacOSX/Conceptual/BPInternational/InternationalizingYourCode/InternationalizingYourCode.html" target="_blank" rel="external">https://developer.apple.com/library/ios/documentation/MacOSX/Conceptual/BPInternational/InternationalizingYourCode/InternationalizingYourCode.html</a></p>
<h2 id="xib-storyboard-的国际化"><a href="#xib-storyboard-的国际化" class="headerlink" title="xib/storyboard 的国际化"></a>xib/storyboard 的国际化</h2><p>除了借助 localizable strings 文件进行界面国际化之外，对于 xib/storyboard 可以直接进行国际化。虽然看上去很方便、很直观，但其实并不是特别好用。</p>
<p>它的原理其实还是 localizable strings，只不过这个 strings 文件是 Xcode 自动创建的。创建的时机是在你对这个界面开启 localization 时，而且它并不会监控 xib/storyboard 的变化。如果你在 localization 之后又改变了这个 xib/storyboard，主要是增加了新的控件，那么这个新控件并不会自动出现在 strings 文件中。</p>
<p>那你就没办法了，Xcode 也没有提供同步的手段，你唯一能做的是查看 xib 的源代码，从中找到新建控件的 ID，然后自己写到那个 strings 文件里－－噢，这一点都不方便。</p>
<h2 id="Bundle-Display-Name-的国际化"><a href="#Bundle-Display-Name-的国际化" class="headerlink" title="Bundle Display Name 的国际化"></a>Bundle Display Name 的国际化</h2><p>显然，需要对不同语言设定不同的应用名称，也就是 Bundle Display Name，我们都知道它在 Info.plist 里。</p>
<p>但注意，不是把 Info.plist 进行 Localization，如果对 Info.plist 进行了 Localization，会编译报错 the file Info.plist does not exist.</p>
<p>正确的方式是在工程里新建一个名为 <code>InfoPlist.strings</code> 的文件，然后对这个 strings 文件进行国际化，在里面写入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;CFBundleDisplayName&quot; = &quot;名称&quot;;</div></pre></td></tr></table></figure>
<p>即可。</p>
<p>注意，需要把 InfoPlist.strings 文件加到工程属性里的 Copy Bundle Resources 里（默认应该就给加上了，如果有问题可以检查一下）。但不要把 Info.plist 文件加到 Copy Bundle Resources 里，否则出现编译警告。</p>
<h2 id="Base-语言的问题"><a href="#Base-语言的问题" class="headerlink" title="Base 语言的问题"></a>Base 语言的问题</h2><p>测试发现，将 iOS 设备设置为并没有支持的语言时，应用并没有正确地显示为 Base 中的字符串（英语），而是显示成了简体中文。</p>
<p>Stackoverflow 上有很多国内外开发者遇到了这个问题，但都未找到原因和解决方法。</p>
<p><a href="http://stackoverflow.com/questions/20241256/ios-app-default-language-en-is-not-applied" target="_blank" rel="external">http://stackoverflow.com/questions/20241256/ios-app-default-language-en-is-not-applied</a><br><a href="http://stackoverflow.com/questions/20241256/ios-app-default-language-en-is-not-applied" target="_blank" rel="external">http://stackoverflow.com/questions/20584984/ios-set-a-default-language-in-xcode-for-my-app</a><br><a href="http://stackoverflow.com/questions/18114994/does-my-base-internationalization-storyboard-have-to-correspond-to-a-fallback-la" target="_blank" rel="external">http://stackoverflow.com/questions/18114994/does-my-base-internationalization-storyboard-have-to-correspond-to-a-fallback-la</a></p>
<h2 id="App-Store-应用名称及简介的国际化"><a href="#App-Store-应用名称及简介的国际化" class="headerlink" title="App Store 应用名称及简介的国际化"></a>App Store 应用名称及简介的国际化</h2><p>希望让应用在不同国家的 App Store 中显示不同语言的名称，在 iTunes Connect 里新建应用时先用一个主要语言新建，如简体中文，新建成功后在 App 信息里可以看到“可本地化的信息”，可以在右侧选择语言，并且填入相对应的信息。另外，在版本中对应用简介、关键字、截图等也都须进行国际化。</p>
<p>如果未做本地化，则按照选择的主要语言显示。</p>
<p><img src="http://stoneark.qiniudn.com/blogimg/application_localization_in_ios_development.png" width="871"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iOS 对国际化的支持是相对比较完善的。&lt;/p&gt;
&lt;h2 id=&quot;应用的国际化支持&quot;&gt;&lt;a href=&quot;#应用的国际化支持&quot; class=&quot;headerlink&quot; title=&quot;应用的国际化支持&quot;&gt;&lt;/a&gt;应用的国际化支持&lt;/h2&gt;&lt;p&gt;在 Project 属性中，有 Lo
    
    </summary>
    
    
      <category term="iOS" scheme="http://blog.stoneark.org/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Bug about launchscreen storyboard</title>
    <link href="http://blog.stoneark.org/2016/05/19/bug-about-launchscreen-storyboard/"/>
    <id>http://blog.stoneark.org/2016/05/19/bug-about-launchscreen-storyboard/</id>
    <published>2016-05-19T08:17:08.000Z</published>
    <updated>2016-07-25T06:06:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>Launchscreen storyboard，看起来很美，用起来很臭虫。</p>
<p>之前一直没在实践中真正采用过它，这次一试，可真是让人摸不着头脑。</p>
<p>一旦有两个 ImageView，则它们的表现会非常奇怪。尤其是两个图像有重叠部分的时候。<br>即使一张图片在另一张下方，也会把上方图片的重叠部分遮盖住。</p>
<p>设计时：（灰色渐变背景在底层，词记图标在上层）</p>
<p><img src="http://stoneark.qiniudn.com/blogimg/bug_about_launchscreen_storyboard.png" width="350"></p>
<p>运行时：（重叠部分被底层遮盖了）</p>
<p><img src="http://stoneark.qiniudn.com/blogimg/bug_about_launchscreen_storyboard_1.png" width="320"></p>
<p>关于 Launchscreen storyboard，涉及到 UIImageView 出现了很多问题，至今也没有解决：<br><a href="https://forums.developer.apple.com/thread/17146" target="_blank" rel="external">https://forums.developer.apple.com/thread/17146</a>，<br><a href="https://forums.developer.apple.com/message/62721" target="_blank" rel="external">https://forums.developer.apple.com/message/62721</a></p>
<p>暂时还是不用它了，用回 Launch image asset。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Launchscreen storyboard，看起来很美，用起来很臭虫。&lt;/p&gt;
&lt;p&gt;之前一直没在实践中真正采用过它，这次一试，可真是让人摸不着头脑。&lt;/p&gt;
&lt;p&gt;一旦有两个 ImageView，则它们的表现会非常奇怪。尤其是两个图像有重叠部分的时候。&lt;br&gt;即使一张
    
    </summary>
    
    
      <category term="iOS" scheme="http://blog.stoneark.org/tags/iOS/"/>
    
  </entry>
  
</feed>
