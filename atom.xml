<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[SABlog]]></title>
  <subtitle><![CDATA[StoneArk's Blog]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.stoneark.org//"/>
  <updated>2016-07-19T07:25:15.000Z</updated>
  <id>http://blog.stoneark.org//</id>
  
  <author>
    <name><![CDATA[StoneArk]]></name>
    <email><![CDATA[stoneark86@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Blank activity and Empty activity in Android Studio]]></title>
    <link href="http://blog.stoneark.org/2016/04/21/blank-activity-and-empty-activity-in-android-studio/"/>
    <id>http://blog.stoneark.org/2016/04/21/blank-activity-and-empty-activity-in-android-studio/</id>
    <published>2016-04-21T09:31:18.000Z</published>
    <updated>2016-07-19T07:25:15.000Z</updated>
    <content type="html"><![CDATA[<p>Android Studio 新建 Activity 的模板里，有一个 <code>Blank Activity</code>，还有一个 <code>Empty Activity</code>。这两个是不同的。</p>
<p>Blank Activity，会为你新建这样一个 Activity：含有导航栏，导航栏上有返回按钮，并设置了导航栏标题，右下角有一个浮动按钮。</p>
<p>可以发现工程中新建了一个 NewActivity.java 的类，同时新建了两个布局文件，一个是 activity_new.xml，另一个是 content_new.xml。activity_new.xml 中是一个 CoordinatorLayout，并且 include 了 content_new.xml。这个 Activity 显示的内容实际在 content_new.xml 中，它是一个 RelativeLayout。</p>
<p>Empty Activity，会为你新建这样一个 Activity：含有导航栏，没有返回按钮，导航栏标题没有设置，其他都是空白。</p>
<p>工程中新建了 NewActivity.java 和 activity_new.xml，里面是一个 RelativeLayout。</p>
<p>要想实现 Blank Activity 的效果，并希望不要有多余的东西，在一个 xml 布局中实现，可以按照以下框架（下面以 EditPasswordActivity 为例）:</p>
<a id="more"></a>
<figure class="highlight xml"><figcaption><span>activity_edit_password.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">android.support.design.widget.CoordinatorLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">xmlns:app</span>=<span class="value">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">    <span class="attribute">xmlns:tools</span>=<span class="value">"http://schemas.android.com/tools"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:fitsSystemWindows</span>=<span class="value">"true"</span></span><br><span class="line">    <span class="attribute">tools:context</span>=<span class="value">"org.stoneark.doorsbylin.EditPasswordActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">android.support.design.widget.AppBarLayout</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:theme</span>=<span class="value">"@style/AppTheme.AppBarOverlay"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">android.support.v7.widget.Toolbar</span></span><br><span class="line">            <span class="attribute">android:id</span>=<span class="value">"@+id/toolbar"</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"?attr/actionBarSize"</span></span><br><span class="line">            <span class="attribute">android:background</span>=<span class="value">"?attr/colorPrimary"</span></span><br><span class="line">            <span class="attribute">app:popupTheme</span>=<span class="value">"@style/AppTheme.PopupOverlay"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="title">android.support.design.widget.AppBarLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">RelativeLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">        <span class="attribute">xmlns:tools</span>=<span class="value">"http://schemas.android.com/tools"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:paddingBottom</span>=<span class="value">"@dimen/activity_vertical_margin"</span></span><br><span class="line">        <span class="attribute">android:paddingLeft</span>=<span class="value">"@dimen/activity_horizontal_margin"</span></span><br><span class="line">        <span class="attribute">android:paddingRight</span>=<span class="value">"@dimen/activity_horizontal_margin"</span></span><br><span class="line">        <span class="attribute">android:paddingTop</span>=<span class="value">"@dimen/activity_vertical_margin"</span></span><br><span class="line">        <span class="attribute">app:layout_behavior</span>=<span class="value">"@string/appbar_scrolling_view_behavior"</span></span><br><span class="line">        <span class="attribute">tools:context</span>=<span class="value">"org.stoneark.doorsbylin.EditPasswordActivity"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">RelativeLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">android.support.design.widget.CoordinatorLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>中间的这个 RelativeLayout，就是这个 Activity 实际承载的内容，替换成自己的布局即可。但请注意！！一定要为这个布局添加这个属性：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:layout_behavior="@string/appbar_scrolling_view_behavior"</span><br></pre></td></tr></table></figure>
<p>这样的话，这个布局将会在顶部导航栏的下方开始显示。如果不加这个属性，它将从屏幕顶端开始显示，会跟顶部的导航栏重叠在一起。在有的手机上会被导航栏遮盖，有的手机上会显示在导航栏上方。</p>
<blockquote>
<p>附注：@string/appbar_scrolling_view_behavior 是 Android SDK 里定义的一个字符串，直接使用即可，内容为：<br>  <string name="appbar_scrolling_view_behavior" translatable="false">android.support.design.widget.AppBarLayout$ScrollingViewBehavior</string></p>
</blockquote>
<p>然后在 Activity 的 onCreate() 里添加以下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</span><br><span class="line">setSupportActionBar(toolbar);</span><br><span class="line">getSupportActionBar().setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>
<p>并且在 AndroidManifest.xml 里给这个 Activity 添加属性：</p>
<figure class="highlight xml"><figcaption><span>AndroidManifest.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">activity</span></span><br><span class="line">  <span class="attribute">android:name</span>=<span class="value">“.EditPasswordActivity"</span></span><br><span class="line">  <span class="attribute">android:label</span>=<span class="value">"@string/title_activity_edit_password"</span></span><br><span class="line">  <span class="attribute">android:theme</span>=<span class="value">"@style/AppTheme.NoActionBar"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">meta-data</span></span><br><span class="line">      <span class="attribute">android:name</span>=<span class="value">"android.support.PARENT_ACTIVITY"</span></span><br><span class="line">      <span class="attribute">android:value</span>=<span class="value">"org.stoneark.doorsbylin.UserCenterActivity"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>Android Studio 新建 Activity 的模板里，有一个 <code>Blank Activity</code>，还有一个 <code>Empty Activity</code>。这两个是不同的。</p>
<p>Blank Activity，会为你新建这样一个 Activity：含有导航栏，导航栏上有返回按钮，并设置了导航栏标题，右下角有一个浮动按钮。</p>
<p>可以发现工程中新建了一个 NewActivity.java 的类，同时新建了两个布局文件，一个是 activity_new.xml，另一个是 content_new.xml。activity_new.xml 中是一个 CoordinatorLayout，并且 include 了 content_new.xml。这个 Activity 显示的内容实际在 content_new.xml 中，它是一个 RelativeLayout。</p>
<p>Empty Activity，会为你新建这样一个 Activity：含有导航栏，没有返回按钮，导航栏标题没有设置，其他都是空白。</p>
<p>工程中新建了 NewActivity.java 和 activity_new.xml，里面是一个 RelativeLayout。</p>
<p>要想实现 Blank Activity 的效果，并希望不要有多余的东西，在一个 xml 布局中实现，可以按照以下框架（下面以 EditPasswordActivity 为例）:</p>]]>
    
    </summary>
    
      <category term="Android" scheme="http://blog.stoneark.org/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android application display name]]></title>
    <link href="http://blog.stoneark.org/2016/04/19/Android-application-display-name/"/>
    <id>http://blog.stoneark.org/2016/04/19/Android-application-display-name/</id>
    <published>2016-04-19T08:30:25.000Z</published>
    <updated>2016-07-18T09:45:06.000Z</updated>
    <content type="html"><![CDATA[<p>Android 应用的显示名称，在 <code>AndroidManifest.xml</code> 中进行修改。</p>
<figure class="highlight"><figcaption><span>AndroidManifest.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;application</span><br><span class="line">   android:allowBackup="true"</span><br><span class="line">   android:icon="@mipmap/ic_launcher"</span><br><span class="line">   android:label="@string/app_name"</span><br><span class="line">   android:supportsRtl="true"</span><br><span class="line">   android:theme="@style/AppTheme"&gt;</span><br><span class="line">   &lt;activity</span><br><span class="line">       android:name=".LoginActivity"</span><br><span class="line">       android:label="@string/title_activity_login"&gt;</span><br><span class="line">       &lt;intent-filter&gt;</span><br><span class="line">           &lt;action android:name="android.intent.action.MAIN" /&gt;</span><br><span class="line">           &lt;category android:name="android.intent.category.LAUNCHER" /&gt;</span><br><span class="line">       &lt;/intent-filter&gt;</span><br><span class="line">   &lt;/activity&gt;</span><br><span class="line">   &lt;activity</span><br><span class="line">      ...</span><br><span class="line">   &lt;/activity&gt;</span><br><span class="line">&lt;/application&gt;</span><br></pre></td></tr></table></figure>
<p>我们会很显然的认为，修改最外层的 <code>android:label</code> 即可，也就是修改 <code>@string/app_name</code> 的值。但经过实践会发现并不是这样的，Launcher 里显示的竟然是 <code>@string/title_activity_login</code>，也就是 Login Activity 的标题。</p>
<p>实际上，在 Launcher 中显示的应用名称，是被标记为首页面的 Activity 的标题。也就是被标记为：</p>
<figure class="highlight xml"><figcaption><span>AndroidManifest.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>的 Activity。</p>
<p>那 application 标签的 android:label 属性是用来做什么的？它的确如它的名字一样，代表了应用的名称。在应用程序管理器中看到的名称，就是这个名称。但是这个名称并不是 Launcher 用的名称，所以用户在手机的桌面（应用程序列表）中，看到的不是这个名称。</p>
<p>这着实让人感到不可理解。自认为还是 iOS 的处理方式更科学－－在 info.plist 文件中有一个属性 Bundle display name，在这里面存储了应用的显示名称，这是一个应用全局的设置。</p>
<p>那如果首页面 Activity 的标题，跟应用的显示名称不能保持一致，怎么办？那就在 AndroidManifest.xml 里，把首页面 Activity 的 label 设置成应用名称，然后在首页面 Activity 的 onCreate 里，用 setTitle 方法再把标题改掉就好了，如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">   setTitle(<span class="string">"登录"</span>);</span><br><span class="line">   setContentView(R.layout.activity_login);</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>Android 应用的显示名称，在 <code>AndroidManifest.xml</code> 中进行修改。</p>
<figure class="highlight"><figcaption><span>AndroidManifest.xml</span></fig]]>
    </summary>
    
      <category term="Android" scheme="http://blog.stoneark.org/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[html form submit]]></title>
    <link href="http://blog.stoneark.org/2016/04/16/html-form-submit/"/>
    <id>http://blog.stoneark.org/2016/04/16/html-form-submit/</id>
    <published>2016-04-16T08:21:39.000Z</published>
    <updated>2016-07-19T07:26:00.000Z</updated>
    <content type="html"><![CDATA[<p>最近在做的部分与 HTML 的 form 表单相关，记录下以下几个问题。</p>
<h2 id="用_form_表单外的_button_提交">用 form 表单外的 button 提交</h2><p>一般情况下，form 表单的提交按钮会写在 form 表单内，而且非常方便，如:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">"/userlist/add"</span> <span class="attribute">method</span>=<span class="value">"POST"</span>&gt;</span></span><br><span class="line">  用户名：<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"username"</span> <span class="attribute">required</span>=<span class="value">"required"</span> /&gt;</span></span><br><span class="line">  密码：<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"password"</span> <span class="attribute">required</span>=<span class="value">"required"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> <span class="attribute">value</span>=<span class="value">"提交"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样，就会有一个叫提交的按钮，点击后会执行 form 的 action。</p>
<p>但有时我们需要在 form 标签以外的某一个 button 上执行表单的提交。比如在另外一个 div 上有一个 button。这时就让这个 button 去执行一个 js 方法，用 js 去调用这个 form 的submit 方法即可，如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"modal-body"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">"/userlist/add"</span> <span class="attribute">method</span>=<span class="value">"POST"</span> <span class="attribute">id</span>=<span class="value">"formNewUser"</span>&gt;</span></span><br><span class="line">  用户名：<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"username"</span> /&gt;</span></span><br><span class="line">  密码：<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"password"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> <span class="attribute">value</span>=<span class="value">"提交"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"modal-footer"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">button</span> <span class="attribute">onclick</span>=<span class="value">"$('#formNewUser').submit()"</span>&gt;</span>提交<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意，直接调用 submit 方法的方式提交，即使给 username 和 password 的 input 标签添加了 required 属性，也不会自动校验，而是直接执行 action 的方法。所以如果需要校验必填项，就在 js 方法里面校验，如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"modal-footer"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">button</span> <span class="attribute">onclick</span>=<span class="value">"submitValidate()"</span>&gt;</span>提交<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">submitValidate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ($(<span class="string">"#username"</span>).val().length == <span class="number">0</span>) &#123;</span><br><span class="line">  alert(<span class="string">"请输入用户名"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ($(<span class="string">"#password"</span>).val().length == <span class="number">0</span>) &#123;</span><br><span class="line">  alert(<span class="string">"请输入密码"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  $(<span class="string">'#formNewUser'</span>).submit()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="form_表单内的_button_会默认自动提交">form 表单内的 button 会默认自动提交</h2><p>如果一个 button 在 form 表单里，那他默认就是一个 submit 按钮，不管你有没有写成 <code>type=&quot;submit&quot;</code>。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">button</span>&gt;</span>...<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但有些按钮我们并不想让它执行提交，则可以对其添加属性 <code>type=&quot;button&quot;</code> 即可。</p>
<h2 id="提交非由用户填写的参数">提交非由用户填写的参数</h2><p>有时我们需要在调用接口时，提交一些不是由用户填写的参数。</p>
<p>如编辑一条数据，其 id 是程序在提交时直接填充上的，而不需要由用户填写，也不需要用户看到。</p>
<p>这时，只需要在 form 里增加一个 input，并且将其 <code>hidden</code> 属性设置为 <code>hidden</code>，value 属性设置为所需要提交的值即可。如:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">value</span>=<span class="value">"1234567890abcdef"</span> <span class="attribute">hidden</span>=<span class="value">"hidden"</span> <span class="attribute">name</span>=<span class="value">"id"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"username"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"address"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在做的部分与 HTML 的 form 表单相关，记录下以下几个问题。</p>
<h2 id="用_form_表单外的_button_提交">用 form 表单外的 button 提交</h2><p>一般情况下，form 表单的提交按钮会写在 form 表单内，而且非常方]]>
    </summary>
    
      <category term="Web" scheme="http://blog.stoneark.org/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[EJS template]]></title>
    <link href="http://blog.stoneark.org/2016/04/14/ejs-template/"/>
    <id>http://blog.stoneark.org/2016/04/14/ejs-template/</id>
    <published>2016-04-14T07:03:06.000Z</published>
    <updated>2016-07-18T07:40:33.000Z</updated>
    <content type="html"><![CDATA[<p>与所有软件开发一样，Web 开发中也会面对着逻辑和数据。将逻辑和数据分开，是良好的工程结构必须做到的，否则代码会混乱不堪。而很不幸的是，用 JavaScript 去生成 HTML 时，往往就会都杂糅到一块儿。</p>
<p><a href="http://www.embeddedjs.com" target="_blank" rel="external">EJS</a> 就是一个 JavaScript 的模版类，可以将逻辑写成一个 HTML 模版，并把数据分离出去。包括 hexo, Express.js 等框架中也都采用了 EJS。</p>
<p><img src="http://stoneark.qiniudn.com/blogimg/ejs_template.png" alt="EJS"></p>
<p>其最主要的是 <code>&lt;% js代码 %&gt;</code> 和 <code>&lt;%= 表达式 %&gt;</code> 两个语句。前者会执行里面的 js 代码，后者会将里面的表达式直接输出到 HTML 中。</p>
<p>如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (gender==<span class="number">0</span>) &#123; %&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">%=</span> '<span class="attribute">Male</span>' %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">%</span> &#125; <span class="attribute">else</span> <span class="attribute">if</span> (<span class="attribute">gender</span>=<span class="value">=1)</span> &#123; %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">%=</span> '<span class="attribute">Female</span>' %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">%</span> &#125; <span class="attribute">else</span> &#123; %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">%=</span> '<span class="attribute">Unknown</span>' %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">%</span> &#125; %&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>简单的判断，也可用问号表达式：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= a&gt;<span class="number">10</span> ? <span class="string">'Success'</span> : <span class="string">'Failed'</span> %&gt;</span><br></pre></td></tr></table></figure>
<p>需要注意，开括号<code>&lt;%</code>的右侧和内容之间、闭括号<code>%&gt;</code>的左侧和内容之间，一定要留有空格，否则会报错。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>与所有软件开发一样，Web 开发中也会面对着逻辑和数据。将逻辑和数据分开，是良好的工程结构必须做到的，否则代码会混乱不堪。而很不幸的是，用 JavaScript 去生成 HTML 时，往往就会都杂糅到一块儿。</p>
<p><a href="http://www.embed]]>
    </summary>
    
      <category term="Web" scheme="http://blog.stoneark.org/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 收回软键盘]]></title>
    <link href="http://blog.stoneark.org/2016/03/27/Android-hide-soft-keyboard/"/>
    <id>http://blog.stoneark.org/2016/03/27/Android-hide-soft-keyboard/</id>
    <published>2016-03-27T09:17:46.000Z</published>
    <updated>2016-07-18T10:12:12.000Z</updated>
    <content type="html"><![CDATA[<p>在 iOS 里，如果要收回软键盘，只需要调用当前持有焦点的 TextField 的 resignFirstResponder 方法即可。所以很自然的，在 Android 里，就会想到调用 EditText 的 <code>clearFocus()</code> 方法。但发现这样并没有让键盘收回，这与 iOS 不同。</p>
<p>在 Android 中，应借助 <code>InputMethodManager</code> 可隐藏键盘，方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hideKeyboard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    View viewFocus = <span class="keyword">this</span>.getCurrentFocus();</span><br><span class="line">    <span class="keyword">if</span> (viewFocus != <span class="keyword">null</span>) &#123;</span><br><span class="line">        InputMethodManager imManager = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);</span><br><span class="line">        imManager.hideSoftInputFromWindow(viewFocus.getWindowToken(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>要注意，就像刚才所说，虽然有 viewFocus.clearFocus() 这个方法，但调用它是无法让软键盘收回的。</p>
<p>另外，用上面这个方法能够收回键盘，但输入框依然持有着焦点。也就是说，焦点与软键盘是否显示，并无关系。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在 iOS 里，如果要收回软键盘，只需要调用当前持有焦点的 TextField 的 resignFirstResponder 方法即可。所以很自然的，在 Android 里，就会想到调用 EditText 的 <code>clearFocus()</code> 方法。但发现]]>
    </summary>
    
      <category term="Android" scheme="http://blog.stoneark.org/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 单选框]]></title>
    <link href="http://blog.stoneark.org/2016/03/27/Android-radiobutton/"/>
    <id>http://blog.stoneark.org/2016/03/27/Android-radiobutton/</id>
    <published>2016-03-27T08:03:37.000Z</published>
    <updated>2016-07-16T09:02:27.000Z</updated>
    <content type="html"><![CDATA[<p>与 iOS 不同，Android 提供了单选框，含有两个组件：<code>RadioButton</code> 和 <code>RadioGroup</code>。</p>
<p>把若干个 RadioButton 放到一个 RadioGroup 内，则这个 RadioGroup 内的 RadioButton 自动完成只能选择一个的功能。</p>
<p>但是需要注意，如果想要提供默认值，如默认选择第一个 RadioButton，不能在布局文件中把第一个 RadioButton 的 checked 属性设为 true，否则它会一直处于被选中状态。如果要实现默认值，在 java 代码中实现，如可以在 onCreate 时调用 RadioGroup 的 check 方法，传入第一个 RadioButton 的 id 即可，如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">radioGroup.check(R.id.radioButtonFirst);</span><br></pre></td></tr></table></figure>
<p>另外，如果要取得 RadioGroup 中被选择的项，可通过 RadioGroup 的 getCheckedRadioButtonId 方法得到被选择的 RadioButton 的 id。然后可通过 findViewById 得到这个 RadioButton，再以此得到它的 tag 确定选择了第几项。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>与 iOS 不同，Android 提供了单选框，含有两个组件：<code>RadioButton</code> 和 <code>RadioGroup</code>。</p>
<p>把若干个 RadioButton 放到一个 RadioGroup 内，则这个 RadioGro]]>
    </summary>
    
      <category term="Android" scheme="http://blog.stoneark.org/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android pop to parent activity with status preserving]]></title>
    <link href="http://blog.stoneark.org/2016/03/26/Android-pop-to-parent-activity-with-status-preserving/"/>
    <id>http://blog.stoneark.org/2016/03/26/Android-pop-to-parent-activity-with-status-preserving/</id>
    <published>2016-03-26T07:04:56.000Z</published>
    <updated>2016-07-16T07:18:11.000Z</updated>
    <content type="html"><![CDATA[<p>用 Android Studio 创建的 Blank Activity，在新建向导里会问你它是否有上级页面，可以在里面填上它上一级的 Activity，那么生成的 Activity 顶部的导航栏左侧就有返回按钮，并且点击后可以返回上一级页面。</p>
<p>但是这个返回按钮是有问题的。正常情况下，点击返回应该直接返回到之前创建的上层 Activity，也就是直接 pop 到上一层。但是这个返回按钮，是把上一层 Activity 重新创建了一遍显示出来的，导致无法显示之前的状态。</p>
<p>比如上层 Activity 有一个 ViewPager，里面有两个 Fragment。在第二个 Fragment 里点击进入了详情的 Activity，然后点击返回按钮，发现返回到了上层 Activity 的初始状态-默认选择的第一个 Fragment。</p>
<p>可以在 <code>AndroidManifest.xml</code> 中看到，实现方式是定义了一个 PARMENT_ACTIVITY:</p>
<figure class="highlight xml"><figcaption><span>AndroidManifest.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">activity</span> <span class="attribute">android:name</span>=<span class="value">".ProductListActivity"</span></span><br><span class="line">    <span class="attribute">android:label</span>=<span class="value">"@string/title_activity_product_list"</span></span><br><span class="line">    <span class="attribute">android:parentActivityName</span>=<span class="value">".MainActivity"</span></span><br><span class="line">    <span class="attribute">android:theme</span>=<span class="value">"@style/AppTheme.NoActionBar"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta-data</span></span><br><span class="line">        <span class="attribute">android:name</span>=<span class="value">"android.support.PARENT_ACTIVITY"</span></span><br><span class="line">        <span class="attribute">android:value</span>=<span class="value">"org.stoneark.doorsbylin.MainActivity"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>解决方法也很简单，在 <code>AndroidManifest.xml</code> 中把上一层 Activity 的属性 <code>android:launchMode</code> 改为 <code>singleTop</code> 即可，即：</p>
<figure class="highlight xml"><figcaption><span>AndroidManifest.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">activity</span></span><br><span class="line">    <span class="attribute">android:name</span>=<span class="value">".MainActivity"</span></span><br><span class="line">    <span class="attribute">android:label</span>=<span class="value">"@string/title_activity_main"</span></span><br><span class="line">    <span class="attribute">android:theme</span>=<span class="value">"@style/AppTheme.NoActionBar"</span></span><br><span class="line">    <span class="attribute">android:launchMode</span>=<span class="value">"singleTop"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>launchMode 的默认值是 standard，每次都会强制重新创建一个 activity 的实例，所以导致了问题。根据 <a href="https://developer.android.com/guide/topics/manifest/activity-element.html#lmode" target="_blank" rel="external">Android 文档</a>中的描述，<br>android:launchMode 的取值有：<code>standard</code> 、<code>singleTop</code> 、<code>singleTask</code>、<code>singleInstance</code>，默认值是 standard：</p>
<ul>
<li><code>standard</code> 允许该 activity 有多个实例，并且每当显示这个 activity 时就总是重新创建一个。</li>
<li><code>singleTop</code> 允许该 activity 有多个实例，但如果它当前在栈顶，则不重新创建。</li>
<li><code>singleTask</code> 只允许该 activity 有一个实例，并且它只能存在于栈底。</li>
<li><code>singleInstance</code> 与 singleTask 相同，另外还要求栈中只能有它自己，而不能再启动另外任何 activity。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>用 Android Studio 创建的 Blank Activity，在新建向导里会问你它是否有上级页面，可以在里面填上它上一级的 Activity，那么生成的 Activity 顶部的导航栏左侧就有返回按钮，并且点击后可以返回上一级页面。</p>
<p>但是这个返回按钮]]>
    </summary>
    
      <category term="Android" scheme="http://blog.stoneark.org/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 用 ID 字符串取到对应的 View]]></title>
    <link href="http://blog.stoneark.org/2016/03/24/Android-find-view-by-id-string/"/>
    <id>http://blog.stoneark.org/2016/03/24/Android-find-view-by-id-string/</id>
    <published>2016-03-24T06:21:02.000Z</published>
    <updated>2016-07-16T07:15:36.000Z</updated>
    <content type="html"><![CDATA[<p>我们经常会需要在一个 for 循环中，取到多个 View，这时就需要用拼接得到的字符串作为 ID 来取 View。<br>但 findViewById 的参数是一个 Int 类型，一般用 R.id.xxx 来直接得到这个 Int 值。但如何用字符串来取 View 呢？</p>
<p>这时需要先用 getResources().getIdentifier 由 String 得到对应的 Int，比如下面将会获取 btnItem0 到 btnItem5 这六个按钮：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">5</span>;i++) &#123;</span><br><span class="line">    String strButtonID = <span class="string">"btnItem"</span> + i;</span><br><span class="line">    <span class="keyword">int</span> buttonID = getResources().getIdentifier(strButtonID,<span class="string">"id"</span>,<span class="string">"org.stoneark.packagename"</span>);</span><br><span class="line">    Button btnItem = (Button) findViewById(buttonID);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>我们经常会需要在一个 for 循环中，取到多个 View，这时就需要用拼接得到的字符串作为 ID 来取 View。<br>但 findViewById 的参数是一个 Int 类型，一般用 R.id.xxx 来直接得到这个 Int 值。但如何用字符串来取 View 呢？</p]]>
    </summary>
    
      <category term="Android" scheme="http://blog.stoneark.org/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Button with both text and image]]></title>
    <link href="http://blog.stoneark.org/2016/03/23/Android-Button-with-both-text-and-image/"/>
    <id>http://blog.stoneark.org/2016/03/23/Android-Button-with-both-text-and-image/</id>
    <published>2016-03-23T08:30:25.000Z</published>
    <updated>2016-07-16T07:15:24.000Z</updated>
    <content type="html"><![CDATA[<p>最近帮朋友做一个不大不小的项目，开发上需要完成 iOS、Android、后台管理三部分。Android 和后台管理的开发虽然之前也都了解一些，但一直没有真正做过什么东西。于是决定把 iOS 交给 Ran，Android 和后台管理也不再找别人做了，自己尝试一下。</p>
<p>Android 的开发在有些地方还是比 iOS 更加方便的。比如实现一个同时有文字和图片的按钮，在 Android 上，Button 有这样四个属性：<br><code>drawableLeft</code>, <code>drawableRight</code>, <code>drawableTop</code>, <code>drawableBottom</code>，<br>分别可以在文字的左侧、右侧、顶部、下部放置图片，简直不能再简单。</p>
<p>当然，还是那句话，不存在 iOS 开发更简单或者 Android 开发更简单这样的说法。它们各自都有实现起来相对另一个更方便的地方。所谓简单与难，其实只是精通与知道的差别。永远不要说别人的工作比自己的简单－－只是别人比你知道的更多。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近帮朋友做一个不大不小的项目，开发上需要完成 iOS、Android、后台管理三部分。Android 和后台管理的开发虽然之前也都了解一些，但一直没有真正做过什么东西。于是决定把 iOS 交给 Ran，Android 和后台管理也不再找别人做了，自己尝试一下。</p>
<]]>
    </summary>
    
      <category term="Android" scheme="http://blog.stoneark.org/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Ripple Button with Background color]]></title>
    <link href="http://blog.stoneark.org/2016/03/21/Android-Ripple-Button-with-Background-color/"/>
    <id>http://blog.stoneark.org/2016/03/21/Android-Ripple-Button-with-Background-color/</id>
    <published>2016-03-21T07:03:52.000Z</published>
    <updated>2016-07-16T07:15:45.000Z</updated>
    <content type="html"><![CDATA[<p>自从引入了 Meterial design，Android 变得漂亮了许多，比如从 Lollipop 开始 Button 默认就带有了 Ripple 效果。但如果给这个 Button 赋了 background 属性，改变了它的背景色，则会发现 Ripple 效果消失了。</p>
<p>如果要改变它的背景色，还想要有 Ripple 效果，那么不要改它的 background 属性，而是将它的 style 属性设置为 @style/Widget.AppCompat.Button.Colored，然后在 Colors.xml 中更改 colorAccent 的颜色值即可。但是要注意，这种方式类似改变“主题”，程序中所有的按钮、单选框等控件的颜色都会一同改变。</p>
<p>除了 colorAccent，还有 colorPrimary, colorPrimaryDark 等可以改变的主题颜色。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>自从引入了 Meterial design，Android 变得漂亮了许多，比如从 Lollipop 开始 Button 默认就带有了 Ripple 效果。但如果给这个 Button 赋了 background 属性，改变了它的背景色，则会发现 Ripple 效果消失了。<]]>
    </summary>
    
      <category term="Android" scheme="http://blog.stoneark.org/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[曾经十分出名的软件公司]]></title>
    <link href="http://blog.stoneark.org/2016/03/06/software-companies-which-have-been-famous/"/>
    <id>http://blog.stoneark.org/2016/03/06/software-companies-which-have-been-famous/</id>
    <published>2016-03-06T08:50:00.000Z</published>
    <updated>2016-03-19T14:36:47.000Z</updated>
    <content type="html"><![CDATA[<p>今天看到一则新闻：<a href="http://tech.sina.com.cn/it/2016-02-29/doc-ifxpvysx1743029.shtml" target="_blank" rel="external">瑞星也冲刺新三板了 还记得曾经的小狮子吗</a>，我是一个怀旧的人，就突然想看看之前那些十分出名的软件公司，现在都变成什么样了。</p>
<p><a href="http://www.rising.com.cn" target="_blank" rel="external">瑞星</a>，国内非常有名的杀毒软件，我自己从来没用过，给人留下印象最深的就是那个小狮子。我对它的感觉是没感觉，没有特别喜欢也没有特别不喜欢。但自从东方微点案被爆出后，对它就变得特别不喜欢了。</p>
<p><a href="http://www.jiangmin.com" target="_blank" rel="external">江民</a>，DOS 时代杀毒绝对的王者，没有之一。现在我脑海里还能回忆起 KV300 的包装，白色、软质的包装，里面是一个 3.5 寸的软盘：<br><img src="http://stoneark.qiniudn.com/blogimg%2Fjiangmin_kv300.jpg" alt="KV300"></p>
<p><a href="http://www.kingsoft.com" target="_blank" rel="external">金山</a>，这是一家很厉害的公司，至今如此。当年 DOS 平台下 WPS 是中文文字处理绝对的王者，记得上小学的时候计算机课程很主要的一个内容就是 WPS。后来的 WPS Office、金山词霸、金山快译、金山毒霸，以及西山居游戏、猎豹移动，金山一直没有退出公众的视野。其创始人求伯君也是中国软件行业神话一般的存在。<br><img src="http://stoneark.qiniudn.com/blogimg%2Fkingsoft_wps.png" alt="WPS"></p>
<p><a href="http://www.hongen.com" target="_blank" rel="external">洪恩</a>，当年计算机教育软件绝对的老大，在电脑刚刚开始在中国普及的时候，可以说洪恩让国人学会了使用电脑。没经历过那个年代的可能感受不到，但只要在九十年代末二十一世纪初接触了电脑的人来说，很多人会记得洪恩。开天辟地、万事无忧、畅通无阻这三个系列软件，成为了电脑学习三部曲，尤其是开天辟地的知名度非常高。另外还有从零开始学英语、天问等等一系列的教育软件。我最早买的正版软件都是出自洪恩之手。另外，洪恩还有一个叫做“洪恩在线”的 BBS，当年人气也非常旺。可惜的是随着计算机的普及，计算机教育软件的需求就不再旺盛了。洪恩经历几次调整，如今已经转型做幼教了。话说 MacTalk 的池老也是出自洪恩。<br><img src="http://stoneark.qiniudn.com/blogimg%2Fhongen_kaitianpidi.jpg" alt="开天辟地"><br>（图片来自网络）</p>
<p><a href="http://herosoft.com" target="_blank" rel="external">豪杰</a>，跟洪恩一样，经历过那个年代的人肯定知道，没经历过的也就没经历过了。曾经，没有暴风影音，没有迅雷看看，有的是豪杰超级解霸：<br><img src="http://stoneark.qiniudn.com/blogimg%2Fherosoft_chaojijieba.jpg" alt="超级解霸2001"></p>
<p>这绝对是播放 VCD 的一霸，当年的装机必备。软件分两个窗口，一个是这个控制窗口，另一个是正在播放的视频。后来其他全能播放软件出现，豪杰虽然也不断推陈出新，推出了 3000、V8 等版本，但颓势终究不可避免。今天再一次打开它的网站，发现已写着 Close Off，可惜。<br><img src="http://stoneark.qiniudn.com/blogimg%2Fherosoft_closeoff.png" alt="Herosoft Close Off"></p>
<p>千千静听，从 Winamp 和 Foobar 统治的音乐播放软件中突围，取长补短，更符合中国人的习惯，很快变得家喻户晓。但随着网速越来越快，人们的习惯从之前的下载到本地听歌，逐渐转变为了在线听歌。千千静听逐渐被酷狗、酷我等赶超，之后被百度收购，现在千千静听这个品牌已不复存在。<br><img src="http://stoneark.qiniudn.com/blogimg%2Fttplayer.jpg" alt="千千静听"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天看到一则新闻：<a href="http://tech.sina.com.cn/it/2016-02-29/doc-ifxpvysx1743029.shtml" target="_blank" rel="external">瑞星也冲刺新三板了 还记得曾经的小狮子吗</a]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Swift 与 Objective-C 混编]]></title>
    <link href="http://blog.stoneark.org/2016/03/02/swift-mixed-with-objective-c/"/>
    <id>http://blog.stoneark.org/2016/03/02/swift-mixed-with-objective-c/</id>
    <published>2016-03-02T07:59:32.000Z</published>
    <updated>2016-03-05T06:38:26.000Z</updated>
    <content type="html"><![CDATA[<p>Swift 这门新兴的编程语言，自从 WWDC 2014 被发布以来不断被完善，并获得了越来越多苹果开发者的认可。WWDC 2015 时 2.0 版本的发布以及开源，让我们看到了 Swift 的不断成熟，苹果也在提倡开发者们向 Swift 转移。</p>
<p>我很早就阅读了 Swift 的相关内容，并且感觉它是一个很不错的开发语言。它具有一些现代脚本语言的特征，更重要的是跟我早先常用的 Pascal 语言在很多地方十分相近，感觉很亲切。虽然如此，实际在工作中还并未引进 Swift，我和我的团队依然在用 Objective-C 进行 iOS 软件的开发。</p>
<p>今天突然想在开发新功能时试一把 Swift，于是研究了一下 Swift 和 Objective-C 的混编，在原有 Objective-C 工程中引入了 Swift。</p>
<h3 id="Swift_代码调用_Objective-C_代码">Swift 代码调用 Objective-C 代码</h3><p>在现有 Objective-C 工程中，新建一个 Cocoa Touch Class，新建时选择 Language 为 Swift，会弹出对话框提示是否需要创建 Bridging Header:<br><img src="http://stoneark.qiniudn.com/blogimg%2Fswift_objc_bridge0.jpg" alt="Create Bridging Header"></p>
<p>创建后工程中会新建一个名为 <code>ProjectName-Bridging-Header.h</code> 的头文件。编辑这个头文件，Swift 代码需要调用的 Objective-C 头文件，都在这个文件中 import 即可：</p>
<figure class="highlight objc"><figcaption><span>ProjectName-Bridging-Header.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Use this file to import your target's public headers that you would like to expose to Swift.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"BaseViewController.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"APIHandler.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;YYModel.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;MJRefresh.h&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>另外，可以在工程属性的 Build Settings 中，可以找到 <code>Objective-C Bridging Header</code> 项，其中已自动填入了这个 ProjectName-Bridging-Header.h 的路径。<br><img src="http://stoneark.qiniudn.com/blogimg%2Fswift_objc_bridge1.png" alt=""></p>
<h3 id="Objective-C_代码调用_Swift_代码">Objective-C 代码调用 Swift 代码</h3><p>在需要调用 Swift 代码的 Objective-C 文件头部，写入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#import &#8220;ProductModuleName-Swift.h&#8221;</span><br></pre></td></tr></table></figure>
<p>即可，然后就能调用工程中 <strong>所有</strong> 的 Swift 源码，并不需要单独指定需要调用哪一个。<br>这个 ProductModuleName，默认就是工程名称，如”YouYouYuEr-Swift.h”。可以在工程属性的 Build Settings 中，找到 <code>Product Module Name</code> 项查看。<br><img src="http://stoneark.qiniudn.com/blogimg%2Fswift_objc_bridge2.png" alt=""></p>
<p>这个头文件的全名，也可在工程属性的 Build Settings 中，找到 <code>Objective-C Generated Interface Header Name</code> 项查看，可以看到它的值为 <code>$(SWIFT_MODULE_NAME)-Swift.h</code>。（可见上一小节第 2 张图）</p>
<p>但注意，这个文件在工程中 <strong>并不</strong> 实际存在。因为就像刚才所说，import 这个文件后能调用工程中 <strong>所有</strong> 的 swift 源码，所以就不需要由开发者再去编辑这个文件，来告知编译器需要引用哪些 .swift 文件。而反过来则不同，Swift 调用 Objective-C 需要告知编译器需要调用哪些 Obejctive-C 文件，所以需要一个 ProjectName-Bridging-Header.h 供开发者去编辑。</p>
<h3 id="总结">总结</h3><p>可以看到，Build Settings 中的 <code>Objective-C Bridging Header</code> 和 <code>Objective-C Generated Interface Header Name</code> 两项，是 Swift 与 Objective-C 混编的关键，分别为一种语言引用另一种语言提供了桥梁。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Swift 这门新兴的编程语言，自从 WWDC 2014 被发布以来不断被完善，并获得了越来越多苹果开发者的认可。WWDC 2015 时 2.0 版本的发布以及开源，让我们看到了 Swift 的不断成熟，苹果也在提倡开发者们向 Swift 转移。</p>
<p>我很早就阅读]]>
    </summary>
    
      <category term="Swift" scheme="http://blog.stoneark.org/tags/Swift/"/>
    
      <category term="iOS" scheme="http://blog.stoneark.org/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[最近开发人员招聘情况]]></title>
    <link href="http://blog.stoneark.org/2016/02/29/recent-developer-interviews/"/>
    <id>http://blog.stoneark.org/2016/02/29/recent-developer-interviews/</id>
    <published>2016-02-29T08:52:47.000Z</published>
    <updated>2016-03-21T06:24:13.000Z</updated>
    <content type="html"><![CDATA[<p>作为整个技术团队的负责人，日常工作中十分重要的一项就是人才的引进，对于技术团队的发展来讲更是至关重要。</p>
<p>年后算是一个跳槽的高峰时段，投简历和来公司面试的也不少，但是合适的并不多。现在的程序员市场有这么几个特点：</p>
<ol>
<li>培训热度持续走高，尤其是 iOS 培训。越来越多的人想通过培训进入软件行业，其教育背景也不再只是计算机相关专业。最近我看到的简历里，很多求职者之前的职业五花八门，如面点师、仓库管理员、销售人员、公关人员、建筑设计师。这足以说明程序员被越来越多的人认为是一个体面、高薪、有前途的职业。</li>
<li>培训质量有所下降，出现简历造假现象。我并不排斥培训，我也见过刚培训完成后，理论知识和实践能力都蛮不错的求职者。但相当多数的求职者，虽然刚培训完，一些基本的问题都还回答不清楚，更别提自己学习一些培训以外的知识了。通过看简历就能知道培训机构现在在教什么，比如 Java 现在的培训项目肯定是云笔记。另外，据说很多机构会引导求职者简历造假。有意思的是，我曾经看到一份简历，他简历中写的一个项目，是我从头到尾一直跟着的，所有参与过这个项目的人我都知道，可是我根本不认识这个人。</li>
<li>有些已经有两三年工作经验的人，一直在一家公司做一件事，也没有自己另外多学些东西做些东西，导致他的实际技术水平并不高，但被自己的工作年限蒙蔽了双眼，觉得自己很厉害了。他们肯定也能找到不错的工作，但我的团队是不需要的，未来的路也不会宽广吧。</li>
</ol>
<p>我希望我的团队成员，是真正有技术感的人，而不是为了生存、为了薪水所以才做技术的人。如果你真正希望一起提高技术，做最好的产品，那就联系我吧！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>作为整个技术团队的负责人，日常工作中十分重要的一项就是人才的引进，对于技术团队的发展来讲更是至关重要。</p>
<p>年后算是一个跳槽的高峰时段，投简历和来公司面试的也不少，但是合适的并不多。现在的程序员市场有这么几个特点：</p>
<ol>
<li>培训热度持续走高，尤其]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[苹果证书签发者过期]]></title>
    <link href="http://blog.stoneark.org/2016/02/26/apple-wwdr-intermediate-certificate-expired/"/>
    <id>http://blog.stoneark.org/2016/02/26/apple-wwdr-intermediate-certificate-expired/</id>
    <published>2016-02-26T07:05:34.000Z</published>
    <updated>2016-03-05T07:19:02.000Z</updated>
    <content type="html"><![CDATA[<p>今天在向 App Store 提交程序包时，突然提示以下错误：<br><img src="http://stoneark.qiniudn.com/blogimg%2Fapple_wwdrca_expired_0.png" alt=""></p>
<p>查看钥匙串访问，发现机器上所有的苹果开发者证书、发布证书，状态都变成了“此证书的签发者无效”：<br><img src="http://stoneark.qiniudn.com/blogimg%2Fapple_wwdrca_expired_1.png" alt=""></p>
<p>搜索证书的签发者 Apple Worldwide Developer Relations Certification Authority，发现证书已于 2016 年 2 月 15 日过期。如果没有找到这个证书签发者，确保在左下方种类中选择了“所有项目”，并在菜单中找到“显示-&gt;显示已过期的证书”。<br><img src="http://stoneark.qiniudn.com/blogimg%2Fapple_wwdrca_expired_2.png" alt=""></p>
<p>苹果开发者网站上也已经做了<a href="https://developer.apple.com/support/certificates/expiration/" target="_blank" rel="external">证书过期声明</a> ，在其中可以找到证书下载链接：<a href="https://developer.apple.com/certificationauthority/AppleWWDRCA.cer" target="_blank" rel="external">https://developer.apple.com/certificationauthority/AppleWWDRCA.cer</a>。下载并导入新的证书，并把旧证书删掉即可，这一次证书的有效期直到北京时间 2023 年 2 月 8 日。<br><img src="http://stoneark.qiniudn.com/blogimg%2Fapple_wwdrca_expired_3.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天在向 App Store 提交程序包时，突然提示以下错误：<br><img src="http://stoneark.qiniudn.com/blogimg%2Fapple_wwdrca_expired_0.png" alt=""></p>
<p>查看钥匙串访问，发现机]]>
    </summary>
    
      <category term="Apple" scheme="http://blog.stoneark.org/tags/Apple/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[NSAttributedString 图片与文字垂直居中]]></title>
    <link href="http://blog.stoneark.org/2016/01/29/NSAttributedString-image-vertically-center-alignment/"/>
    <id>http://blog.stoneark.org/2016/01/29/NSAttributedString-image-vertically-center-alignment/</id>
    <published>2016-01-29T03:12:46.000Z</published>
    <updated>2016-03-06T07:24:36.000Z</updated>
    <content type="html"><![CDATA[<p>在 NSAttributedString 加入图片后，发现图片默认是与文字底部对齐的，但很多情况下，我们都希望图片与文字垂直居中对齐。</p>
<p>NSAttributedString 并没有提供垂直对齐的属性，但可以通过 Baseline 的方式解决。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[attributedStr addAttribute: <span class="built_in">NSBaselineOffsetAttributeName</span> value:@(-<span class="number">2.0</span>) range: <span class="built_in">NSMakeRange</span>(<span class="number">0</span>,<span class="number">1</span>)];</span><br></pre></td></tr></table></figure></p>
<p>参考：<a href="https://discussions.apple.com/thread/2788687" target="_blank" rel="external">https://discussions.apple.com/thread/2788687</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在 NSAttributedString 加入图片后，发现图片默认是与文字底部对齐的，但很多情况下，我们都希望图片与文字垂直居中对齐。</p>
<p>NSAttributedString 并没有提供垂直对齐的属性，但可以通过 Baseline 的方式解决。<br><figu]]>
    </summary>
    
      <category term="NSAttributedString" scheme="http://blog.stoneark.org/tags/NSAttributedString/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 开发中禁止屏幕自动旋转]]></title>
    <link href="http://blog.stoneark.org/2016/01/22/disable-screen-auto-rotate-in-android-developing/"/>
    <id>http://blog.stoneark.org/2016/01/22/disable-screen-auto-rotate-in-android-developing/</id>
    <published>2016-01-22T08:22:19.000Z</published>
    <updated>2016-03-05T10:48:43.000Z</updated>
    <content type="html"><![CDATA[<p>在 iOS 开发中，可以在工程属性里设置全局支持的屏幕朝向。对于只需要支持竖屏显示的应用，在 Device Orientation 中只保留 Portrait，取消选择 Landscape Left, Landscape Right, Upside Down 即可。也可以单独针对某个 View Controller 设置屏幕朝向，实现 UIViewController 的 supportedInterfaceOrientations 方法即可。</p>
<p>团队中的 Android Developer 没处理过这种问题，于是我顺便了解了一下。发现 Android 似乎没有方法全局进行设置，只能针对 Activity 进行设置。</p>
<p>一种方法是在需要限制屏幕旋转的 Activity 的 onCreate 方法里，加入一句：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);</span><br></pre></td></tr></table></figure></p>
<p>另外一种方法，是在 Androidmanifest.xml 中为需要限制屏幕旋转的 Activity 都添加属性：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:screenOrientation="portrait"</span><br></pre></td></tr></table></figure></p>
<p>如果需要全局进行限制，自然是采取前一种方法较好。可以让工程中的所有 Activity 都继承于一个基类 BaseActivity，那只须在 BaseActivity 里调用 setRequestedOrientation 即可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在 iOS 开发中，可以在工程属性里设置全局支持的屏幕朝向。对于只需要支持竖屏显示的应用，在 Device Orientation 中只保留 Portrait，取消选择 Landscape Left, Landscape Right, Upside Down 即可。也可以单]]>
    </summary>
    
      <category term="Android" scheme="http://blog.stoneark.org/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[小心时间格式里 yyyy 的大小写]]></title>
    <link href="http://blog.stoneark.org/2016/01/14/pay-attention-to-casing-of-yyyy-in-date-format/"/>
    <id>http://blog.stoneark.org/2016/01/14/pay-attention-to-casing-of-yyyy-in-date-format/</id>
    <published>2016-01-14T08:17:24.000Z</published>
    <updated>2016-03-06T07:06:36.000Z</updated>
    <content type="html"><![CDATA[<p>团队里的测试工程师测试出一个 bug，表现是：在 Date Picker 选择了2015 年 12 月 27 日，但并显示到 Textfield 里时，变成了 2016-12-27。选择 12 月较早一些的日期，不会出现任何问题。</p>
<p>刚开始感觉一定是测试看花眼了，但尝试之后发现的确可以复现，而且，是必现！</p>
<p>检查了一下代码，发现此处的 NSDateFormatter 对象的 dateFormat 赋了 YYYY-MM-dd，总感觉哪里怪怪的。看了一下其他地方的代码，才意识到，年份一般都是写成小写的 yyyy 的。改成 yyyy-MM-dd 后，果然一切恢复正常了。</p>
<p>但是这个 yyyy 和 YYYY 到底有何区别呢？</p>
<p>查了一下资料，得知 YYYY 表示的是 Week Year，也就是当前日期所在周的年份。一周从周日开始，周六结束，只要本周跨年，就进入了下一年。所以 2015 年 12 月 27 日这一天，用 YYYY 得到的年份就是 2016。</p>
<p>苹果的开发文档中，对日期时间格式的描述是在 <a href="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Conceptual/DataFormatting/DataFormatting.html" target="_blank" rel="external">Introduction to Data Formatting Programming Guide For Cocoa</a> 的 <a href="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Conceptual/DataFormatting/Articles/dfDateFormatting10_4.html#//apple_ref/doc/uid/TP40002369-SW1" target="_blank" rel="external">Date Formatters</a> 章节里。从文档中可以看到，苹果遵循的规范是 <a href="http://www.unicode.org/reports/tr35/tr35-dates.html#Contents" target="_blank" rel="external">UNICODE LOCALE DATA MARKUP LANGUAGE (LDML) PART 4: DATES</a>。这个规范的最后有一张表 Date Field Symbol Table，里面记载了所有的时间描述符，挺有意思的，准备有时间的时候仔细看看。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>团队里的测试工程师测试出一个 bug，表现是：在 Date Picker 选择了2015 年 12 月 27 日，但并显示到 Textfield 里时，变成了 2016-12-27。选择 12 月较早一些的日期，不会出现任何问题。</p>
<p>刚开始感觉一定是测试看花眼了]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[UIControlEventTouchDown 延迟响应]]></title>
    <link href="http://blog.stoneark.org/2015/11/19/UIControlEventTouchDown-event-response-delay/"/>
    <id>http://blog.stoneark.org/2015/11/19/UIControlEventTouchDown-event-response-delay/</id>
    <published>2015-11-19T09:00:08.000Z</published>
    <updated>2016-03-06T07:17:55.000Z</updated>
    <content type="html"><![CDATA[<p>一个 UIButton，其上绑定了 UIControlEventTouchDown 事件。在模拟器上一切正常，反应速度很快，但在真机上出现了很怪异的反应迟钝。通过观察发现，如果按下按钮的右半边，也就是屏幕右边一侧的部分，则不会有反应迟钝现象。如果按下按钮的左半边，也就是屏幕左边一侧的部分，只要按下之后手指不移动，则会一直无响应，直到手指在按钮上产生了位移，才会响应事件。</p>
<p>经调查，这个问题自 iOS 7 开始出现，出现原因是由 iOS 7 开始引入的右滑返回。只需设置以下属性即可避免该问题的出现。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">self</span><span class="variable">.navigationController</span><span class="variable">.interactivePopGestureRecognizer</span> setDelaysTouchesBegan:<span class="literal">NO</span>];</span><br></pre></td></tr></table></figure></p>
<p>而且，这样并不会影响正常的右滑返回。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一个 UIButton，其上绑定了 UIControlEventTouchDown 事件。在模拟器上一切正常，反应速度很快，但在真机上出现了很怪异的反应迟钝。通过观察发现，如果按下按钮的右半边，也就是屏幕右边一侧的部分，则不会有反应迟钝现象。如果按下按钮的左半边，也就是屏幕]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[在 Auto layout 下应用 UIView 动画]]></title>
    <link href="http://blog.stoneark.org/2015/11/13/uiview-animation-with-auto-layout/"/>
    <id>http://blog.stoneark.org/2015/11/13/uiview-animation-with-auto-layout/</id>
    <published>2015-11-13T08:51:45.000Z</published>
    <updated>2016-03-06T07:16:05.000Z</updated>
    <content type="html"><![CDATA[<p>在之前不使用 Autolayout 时，如果需要做简单的 UIView 动画，只需要：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.25</span> animations:^&#123;</span><br><span class="line">  [_topView setFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">35</span>)];</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></p>
<p>但是使用 Autolayout，不能再手动去更改 frame。而且我们会发现，如果按照之前的做法直接改写成：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.25</span> animations:^&#123;</span><br><span class="line">  [_constraintTopViewHeight setConstant:<span class="number">35</span>];</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></p>
<p>是没有动画效果的，依然会瞬间改变它的约束。</p>
<p>正确的方法是：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[_constraintTopViewHeight setConstant:<span class="number">35</span>];</span><br><span class="line">[<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.25</span> animations:^&#123;</span><br><span class="line">  [<span class="keyword">self</span><span class="variable">.view</span> layoutIfNeeded];</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在之前不使用 Autolayout 时，如果需要做简单的 UIView 动画，只需要：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</sp]]>
    </summary>
    
      <category term="Autolayout" scheme="http://blog.stoneark.org/tags/Autolayout/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[EI Capitan brings the missing Hex color picker]]></title>
    <link href="http://blog.stoneark.org/2015/11/04/ei-capitan-brings-the-missing-hex-color-picker/"/>
    <id>http://blog.stoneark.org/2015/11/04/ei-capitan-brings-the-missing-hex-color-picker/</id>
    <published>2015-11-04T05:58:11.000Z</published>
    <updated>2015-11-04T06:26:17.000Z</updated>
    <content type="html"><![CDATA[<p>OS X 里的颜色选取器一直没有集成十六进制的功能，这给程序员和设计师带来了诸多不便，于是有开发者制作了对系统 Color Picker 的增强插件，如我一直在用的 <a href="http://wafflesoftware.net/hexpicker/" target="_blank" rel="external">Hex Color Picker</a>，在系统的 Color Picker 中增加了一栏，专门用来输入十六进制的颜色值，系统全局都能用，很是方便。</p>
<p>但是它在 EI Capitan 上不再好用了，因为系统加入了一项新的安全技术，称作<a href="https://support.apple.com/en-us/HT204899" target="_blank" rel="external">系统完整性保护</a>，即使 root 账户也不允许修改系统主要程序的内容。相应的，像 XtraFinder、HexColorPicker 之类的系统增强类软件，在 EI Capitan 上都只能歇菜了。</p>
<p>不过，好在 Apple 已经发觉到了我们的诉求，在系统的 Color Picker 里增加了十六进制的功能，虽然有些隐蔽：</p>
<p><img src="http://stoneark.qiniudn.com/blogimg/ei_capitan_hex_color_picker.png" alt=""></p>
<p>在第二个选项卡 (Color Slider) 中的 RGB Sliders 里面，下方有个 Hex Color 文本框。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>OS X 里的颜色选取器一直没有集成十六进制的功能，这给程序员和设计师带来了诸多不便，于是有开发者制作了对系统 Color Picker 的增强插件，如我一直在用的 <a href="http://wafflesoftware.net/hexpicker/" target=]]>
    </summary>
    
      <category term="Mac OS X" scheme="http://blog.stoneark.org/tags/Mac-OS-X/"/>
    
  </entry>
  
</feed>